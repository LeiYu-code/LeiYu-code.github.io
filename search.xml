<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>转载-内网arp欺骗与dns欺骗</title>
    <url>/2022/06/03/%E8%BD%AC%E8%BD%BD-%E5%86%85%E7%BD%91arp%E6%AC%BA%E9%AA%97%E4%B8%8Edns%E6%AC%BA%E9%AA%97/</url>
    <content><![CDATA[<p><strong>[南月晨的blog](<a href="https://leiyu-code.github.io/">南月晨的博客 (leiyu-code.github.io)</a>)</strong></p>
<p>leiyu-code.github.io</p>
<p><a href="https://linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></p>
<p><strong>一.实验目的</strong></p>
<p>DNS欺骗即域名信息欺骗是最常见的DNS安全问题。域名系统(Domain Name System,DNS)是一个将Domain Name和IP Address进行互相映射的Distributed Database。DNS是网络应用的基础设施，它的安全性对于互联网的安全有着举足轻重的影响。但是由于DNS Protocol在自身设计方面存在缺陷，安全保护和认证机制不健全，造成DNS自身存在较多安全隐患，导致其很容易遭受攻击。很多专家就DNS Protocol的安全缺陷提出了很多技术解决方案。例如IETF提出的域名系统安全协议(Domain Name System Security,DNSSEC)，其目标就在于解决这些安全隐患。这个Protocol增加了安全认证项目，增强了Protocol自身的安全功能。但是新增加的安全机制需要占用更多的系统和网络资源，同时要升级Database和System Manggament Software,这些基于DNSSEC协议的软件还不成熟，距离普及应用还有较长时间。目前，常见的措施是定期升级DNS软件和加强相关的安全配置，禁用不安全的端口等。以下对以侦听为基础的DNS ID欺骗(DNS ID spoofing)进行了探讨，并提出了相关的防护解决方案。通过练习掌握工具的使用，理解实施过程，掌握防范措施。</p>
<p>上面理论性的东西可以选择性忽略，都是这下面的原理就要详细了解了，不然看着下面的操作步骤可能会很迷…</p>
<span id="more"></span>

<p><strong>二.实验原理</strong></p>
<blockquote>
<p>因为局域网DNS欺骗需要ARP欺骗的配合 所以我这里简单解释一下arp欺骗的原理：有一个欺骗者（主机A）说自己是网关，骗将受害者（主机B）发给真正网关的数据转发给主机A，然后数据经由主机A后再发送给真正的网关，而后主机A又告诉网关它就是主机B（欺骗了网关），骗将本来应该发给B的数据发给主机A（欺骗者），然后由A转发给主机B。&#x2F;&#x2F;就是相当于把主机A当成中间人，把主机B与网关的所有通讯全部要经过主机A，这样子，主机A就可以对主机B的数据信息随意修改然后在转发给网关从而达到了欺骗的效果</p>
</blockquote>
<p><strong>这里简述一下ARP协议当一台主机和另一台主机通信，要知道目标的IP地址，但是在局域网中传输数据的网卡却不能直接识别IP地址，所以用ARP解析协议将IP地址解析成MAC地址。ARP协议的基本功能就是通过目标设备的IP地址，来查询目标设备的mac地址</strong></p>
<p>一条简单的ARP命令：<br>arpspoof -i eth0(网卡)  -t  目标机ip  本地局域网关</p>
<p>1.如arpspoof -i eth0 -t 192.168.159.132  192.168.159.2<br>  这条命令的意思是：发一个arp数据包告诉”192.168.159.132”这台主机，<br>  “192.168.159.2”（网关） 这个IP的MAC就是‘我’攻击者本机的MAC地址，欺骗了目标主机,达成了单向的欺骗，如果没开流量转发可以让目标单纯的断网</p>
<ol start="2">
<li>arpspoof -i eth0(网卡)  -t   本地局域网关   目标机ip<br>arpspoof -i eth0 -t 192.168.159.2 192.168.159.132<br>而这条命令的意思跟上面一样，只不过是在欺骗网关罢了 告诉”192.168.159.2”（网关），<br> 告诉网关”192.168.159.132”这个IP的MAC就是攻击者本机的MAC地址         &#x2F;&#x2F;欺骗到了网关，但是没有欺骗了目标主机，两条组合起来就可以达到双向欺骗<br>1234567891011</li>
</ol>
<p>而DNS欺骗是这样一种中间人攻击形式：局域网内的主机访问一个网站时，会向dns服务器发送dns请求包，这里的dns服务器一般由网关主机担任，dns服务器收到请求后，查找自己的dns缓存表，如果有就返回，没有就返回该域名的根域名服务器，主机再向根域名服务器查询。把自己伪装成本局域网的dns服务器，从而达到域名劫持的效果，它是攻击者冒充域名服务器的一种欺骗行为，它主要用于向主机提供错误DNS信息，当用户想要尝试浏览网页，例如去登录百度的网址：<a href="http://www.baidu.com/">www.baidu.com</a> (百度主机IP为：14.215.177.39)而实际上登录百度网址的IP是被替换掉的<a href="http://www.baidu.com/">www.baidu.com</a>(Kali主机IP: 92.168.42.171)，这时候用户上网就只能看到攻击者的主页，而不是用户想要取得的网站的主页了，这个网址是攻击者用以窃取网上银行登录证书以及帐号信息的假冒网址，DNS欺骗其实并不是真的“黑掉”了对方的网站，而是冒名顶替、招摇撞骗罢了</p>
<p><strong>三、实验环境</strong></p>
<blockquote>
<p>测试机：Windows7虚拟机一台 ip: 192.168.42. 119攻击机：Kali linux 虚拟机一台 ip: 92.168.42.171网关：192.168.42.129工具：kalil inux 渗透测试平台网络环境：手机WiFi网络USB共享，同一局域网，桥接网络模式</p>
</blockquote>
<p><strong>四、实验内容（实验过程）</strong></p>
<ul>
<li><strong>一.信息收集</strong></li>
</ul>
<p>老方法，用nmap开路，先收集靶机的详细信息，用nmap端口扫描工具扫描局域网内存活的主机（这里扫描129这个网段）</p>
<p> 命令:  nmap -Pn -A -o 192.168.42.129&#x2F;24<br>        nmap  -O 是远程检测操作系统和软件<br>        -Pn      无ping扫描，可以绕过一般防火墙检测<br>        -A       全面扫描<br>1234</p>
<p>nmap的参数有很多，这里主要是DNS欺骗演示，所以nmap的详细参数我就不一一列举了，感兴趣的同学可以去度娘找一下详细的资料</p>
<p><img src="https://img-blog.csdnimg.cn/20190825145524252.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825145524252.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>通过nmap详细的列出的信息可以看出该ip主机所开启的端口服务及操作系统类型的详细信息可以推断出该ip主机所用的系统为win7家庭版</p>
<ul>
<li><strong>二. 配置dns规则和主页文件</strong></li>
</ul>
<p>接下来因为使用的欺骗工具是ettercap，首先对dns的文件进行编辑，填写DNS规则，因为ettercap这个工具的dns规则文件存放在etc目录下，所以先用命令 <strong>cd &#x2F;etc&#x2F;ettercap</strong> 切换到etc目录下的ettercap目录，通过终端用vim打开它</p>
<p><img src="https://img-blog.csdnimg.cn/20190825145911929.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825145911929.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>Vim打开后，按一下 i 键进入编辑状态，然后在红色的矩形中输入，前面的*所在的位置代表需要访问的网站的域名，后面是将其欺骗到的ip(本机ip：92.168.42.171)</p>
<p>进行欺骗时，“*”代表不管什么网站，都解析到后面的ip地址，如果输入特定的域名，那就可以进行钓鱼</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151042891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825151042891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>接下来，按一下ESC退出编辑状态，然后按shif加冒号，输入wq，表示写入退出，回车，就可以保存退出了</p>
<p>然后再来编辑&#x2F;var&#x2F;www&#x2F;html下的index.html文件，也就是主页文件，在DNS欺骗成功后，当受害者访问域名网站后，打开的页面就是我们这里的这个主页文件里边的内容（这里只做演示，随便写了一个简单的）</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151316119.jpg" alt="https://img-blog.csdnimg.cn/20190825151316119.jpg"></p>
<p><img src="https://img-blog.csdnimg.cn/20190825151326643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825151326643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>接着启动apache2 也就是网页服务器，就是相当于拿本机（Kali）当web服务器这样子</p>
<p>到终端输入命令 <strong>&#x2F;etc&#x2F;init.d&#x2F;apache2 start</strong> 来启动apache2 服务器</p>
<p>出现OK证明成功启动了</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151425353.jpg" alt="https://img-blog.csdnimg.cn/20190825151425353.jpg"></p>
<ul>
<li><strong>三. 利用Ettercap进行ARP欺骗和中间人攻击</strong></li>
</ul>
<p>接着在终端输入命令ettercap -G来进入ettercap的图形界面，个人喜欢用图形界面，可能是windows玩多的原因吧，当然ettercap也有命令行，看个人喜欢着去选择使用命令行还是图形化界面，反正效果一样的</p>
<p>启动ettercap后，选择Unifind sniffing进行网卡配置，网卡选择eth0（根据自己的电脑网卡而定）如果是无线网卡就选择wla0</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151512664.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825151512664.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>接着到hosts选项下的 scan for hosts扫描存活的主机,扫描完毕点击下图的Hosts list，将网关地址添加到 target2，将攻击目标ip添加到 target1, 接着设置中间人攻击的形式为ARP欺骗 mitm&gt;arp poisoning，勾上第一个设置arp双向欺骗</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151529188.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825151529188.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>Arp欺骗设置完毕，我们去靶机查看一下arp缓存表</p>
<p><img src="https://img-blog.csdnimg.cn/20190825151716185.gif" alt="https://img-blog.csdnimg.cn/20190825151716185.gif"></p>
<p>可以看到网关mac跟攻击机Kali的mac一样，这时候可以确定arp毒化成功，，这时候我们随便找一个http网站登录，然后在Kali输入<code>ettercap -Tq -i eth0</code> 试试能否获取登录密码</p>
<p><strong>参数说明： -T 文本模式 -q 安静模式 -i 网卡</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2019082515203433.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2019082515203433.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>成功嗅探http登录密码 &#x2F;&#x2F;如果需要对https网站进行嗅探，但由于https的安全特性，所以我们需要到Kali更改Sslstrip 配置文件，然后使用sslstrip进行转换把https转换为http</p>
<p>关于https的嗅探实验可以参考我的另一篇博客</p>
<blockquote>
<p>传送门</p>
</blockquote>
<p>成功嗅探后继续配置插件plugins&gt;mangge the plugins，我们要进行的是DNS欺骗 双击dns_spoof 后可以看见下边的提示</p>
<p>最后点击strat&gt;start sniffing开始DNS欺骗</p>
<p><img src="https://img-blog.csdnimg.cn/20190825152225964.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825152225964.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>欺骗成功后可以看到下面显示被欺骗的域名</p>
<p><img src="https://img-blog.csdnimg.cn/20190825152246149.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825152246149.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p><a href="http://去靶机上访问www.baidu.com/">去靶机上访问www.baidu.com</a>，就可以看到百度的网页被替换为刚刚编辑的简单h5页面了</p>
<p>左边是dns欺骗前的，右边是欺骗后的</p>
<p><img src="https://img-blog.csdnimg.cn/20190825152307755.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825152307755.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>关闭插件，并点击mitm选择最后一项停止arp欺骗，在靶机上重新访问百度</p>
<p><img src="https://img-blog.csdnimg.cn/20190825152354512.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825152354512.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>页面恢复正常</p>
<p><img src="https://img-blog.csdnimg.cn/20190825152536760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20190825152536760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZXN0Xw==,size_16,color_FFFFFF,t_70"></p>
<p>当我们关闭插件停止DSN欺骗之后，如果还是无法正常访问网站，那就需要清空dns缓存才能正常访问网页了，万一停止攻击后依然dns错误打不开网页就到cmd界面用输入“ipconfig &#x2F;flushdns”执行，刷新本地的DNS缓存数据</p>
<hr>
<p><strong>五.总结</strong></p>
<p>DNS欺骗即域名信息欺骗是最常见的DNS安全问题。当客户主机向本地DNS服务器查询域名的时候，如果服务器的缓存中已经有相应记录，DNS服务器就不会再向其他服务器进行查询，而是直接将这条记录返回给用户，当主机向某一个DNS服务器发送解析请求时，攻击者冒充被请求方，向请求方返回一个被篡改了的应答，从而请求方访问了被篡改后的IP地址，这样子直接访问被篡改后的网页，容易造成账号密码被盗取。</p>
<p>如何防止dns欺骗：</p>
<p><strong>1.直接修改自己的host文件，将你访问的域名和ip地址直接写到里面，这样就不用通过dns服务器了，也就无法被骗</strong></p>
<p><strong>2.DNS欺骗前提也需要ARP欺骗成功。所以首先做好对ARP欺骗攻击的防范（如绑定本机MAC）</strong></p>
<p><strong>3.Windows下查看和刷清空DNS缓存表的命令命令：ipconfig &#x2F;displaydns ipconfig &#x2F;flushdns</strong></p>
]]></content>
      <categories>
        <category>studytest</category>
      </categories>
      <tags>
        <tag>hacker</tag>
        <tag>arp</tag>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-第二章新手必须掌握的linux命令-查找定位文件命令</title>
    <url>/2022/06/03/%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%96%B0%E6%89%8B%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84linux%E5%91%BD%E4%BB%A4-%E6%9F%A5%E6%89%BE%E5%AE%9A%E4%BD%8D%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>工作目录指的是用户当前在系统中所处的位置</p>
<ul>
<li><strong>pwd</strong></li>
</ul>
<p>用于显示用户当前所处的工作目录，英文全称为“print working directory”</p>
<ul>
<li><p><strong>cd</strong></p>
<p>cd [参数] [目录]</p>
<p>用于切换当前的工作路径</p>
</li>
<li><p><strong>ls</strong></p>
<p>ls [参数] [文件名称]</p>
<p>用于显示目录中的文件信息</p>
</li>
<li><p><strong>tree</strong></p>
<p>用于以树状图的形式列出目录内容及结构</p>
</li>
<li><p><strong>find</strong></p>
<p>find [查找范围] 寻找条件</p>
<p>用于按照指定条件来查找文件所对应的位置</p>
<span id="more"></span>

<p>这里需要重点讲解-exec参数的重要作用。这个参数用于把find命令搜索到的结果交由紧随其后的命令作进一步处理。它十分类似于第3章将要讲解的管道符技术，并且由于find命令对参数有特殊要求，因此虽然exec是长格式形式，但它的前面依然只需要一个减号（-）。</p>
<p>根据文件系统层次标准（Filesystem Hierarchy Standard）协议，Linux系统中的配置文件会保存到&#x2F;etc目录中（详见第6章）。如果要想获取该目录中所有以host开头的文件列表，可以执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]# find /etc -name &quot;host*&quot; -print</span><br><span class="line">/etc/host.conf</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/hosts.allow</span><br><span class="line">/etc/hosts.deny</span><br><span class="line">/etc/avahi/hosts</span><br><span class="line">/etc/hostname</span><br></pre></td></tr></table></figure>

<p>如果要在整个系统中搜索权限中包括SUID权限的所有文件（详见第5章），只需使用-4000即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]# find / -perm -4000 -print</span><br><span class="line">/usr/bin/fusermount</span><br><span class="line">/usr/bin/chage</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/crontab</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进阶实验：</p>
<p>在整个文件系统中找出所有归属于linuxprobe用户的文件并复制到&#x2F;root&#x2F;findresults目录中。该实验的重点是“-exec {} ;”参数，其中的{}表示find命令搜索出的每一个文件，并且命令的结尾必须是“;”。完成该实验的具体命令如下：</p>
<p>[root@linuxprobe ~]# find &#x2F; -user linuxprobe -exec cp -a {} &#x2F;root&#x2F;findresults&#x2F; ;</p>
</blockquote>
</li>
<li><p><strong>locate</strong></p>
<p>locate文件名称</p>
<p>用于按照名称快速搜索文件所对应的位置，作用是找一些常见的且又知道大概名称的文件</p>
</li>
<li><p><strong>whereis</strong></p>
<p>whereis命令名称</p>
<p>用于按照名称快速搜索二进制程序（命令）、源代码以及帮助文件所对应的位置</p>
</li>
<li><p><strong>which</strong></p>
<p>which命令名称</p>
<p>按照指定名称快速搜索二进制程序（命令）所对应的位置</p>
</li>
</ul>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>软件-notion笔记软件</title>
    <url>/2022/06/02/%E8%BD%AF%E4%BB%B6-notion%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Notion，一款强大到改变我人生的软件"><a href="#Notion，一款强大到改变我人生的软件" class="headerlink" title="Notion，一款强大到改变我人生的软件"></a>Notion，一款强大到改变我人生的软件</h1><blockquote>
<p>A unified &amp; collaborative workspace for your notes, wikis, and tasks. 将笔记、知识库和任务管理无缝整合的协作平台</p>
</blockquote>
<p>01.png</p>
<p>熟悉我的人都知道，我是一名重度处女座整理癖，不论是现实生活还是网络世界，我最受不了杂乱无章，所以我会尽我所能的将所有的东西分门别类，安置的井井有条。</p>
<p>生活中的物品还好说，只要摆放整齐，定期断舍离就可以保证不凌乱。但是电子设备中的文件本就是由一个个无序的字符串组成，规模庞大、纷繁复杂。在今天这个信息大爆炸的时代，我们每天都要接收各种各样的新闻、资讯，在这中间有的时候浏览到好的内容，想保存下来等随后有时间再查看，但是它们多半的命运都是扔到收藏夹里吃灰。然后自己骗自己，马了等于看了。</p>
<p>如果你也像我一样，是个爱好广泛且好奇心比较强烈的学习者，那么一款好的笔记型应用，绝对是提高生产力的路上不可或缺的好帮手。我曾经在茫茫海洋中苦苦寻觅，希望可以找到一个帮助我提升专注力、提高学习效率的软件，因为我意识到如果我没有办法及时的对新内容进行筛选、转化，将信息增长的速度抵消掉，那么我终究有一天要被堆积如山的信息所淹没。</p>
<p>为了不让这种可怕的事情发生，我几乎把市面上所有的应用都尝试了个遍，印象笔记、有道云笔记、OneNote、为知笔记、Bear、语雀…虽然有一些能解决我的基本需求，但是始终感觉不是很得心应手，痛点依然很痛。并且它们的功能太过分散，有一些只能解决我的某一部分特定需求，所以我常常需要在很多软件中来回切换，有的时候光是整理这些文件、把他们分门别类就耗费了我大量的精力和时间，在这种情况下很难真正的吸收知识、提高学习效率。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_3_20201212025501697.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_3_20201212025501697.png"></p>
<p>02.png</p>
<p>直到后来我遇见了Notion，它真正的实现了All in One，解决了我一直以来的痛点，好用到我想以身相许（请把公屏打在般配上）。<strong>从此以后，我的天空，星星都亮了。</strong></p>
<p>Notion是一款及其出色的软件，它的中文翻译是「概念」。这不是一款年代悠久的软件，从2016年问世之初到现在也不过才短短的四年时间。跟那些笔记应用届的前辈们相比，它只能算一个初出茅庐的小鲜肉。其实单纯的说它是一款笔记型应用是不准确的。它拥有非常丰富的使用场景，可以说是一个集项目管理、任务管理以及知识库于一身的在线团队协作工具。早些时候有朋友给我推荐过它，但是苦于它的上手成本太高，并且是全英文软件，服务器在国外，所以当时在国内的时候打开速度你懂的，畏难心理让我过早地放弃了，于是就没有花太多的时间去深入的了解它，第一次的相遇就这么遗憾地擦肩而过。</p>
<p>在进入新公司之后，我们所有的工作文档都保存在Notion上，所以我必须要逼自己开始学习如何去使用它，在这个过程中，我渐渐发现了它的魔力，并且在这个过程中被它深深的迷住了。在经过了一个星期的摸索之后，我发现我的生活再也离不开它了，于是我又花了一个星期的时间，把我前小半辈子所有的资料都迁移到了Notion上面，等到这个大工程完成之后，看着它，我竟然发出了此生无憾的感慨，糟糕，这就是心动的感觉。</p>
<h2 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a><strong>一切皆对象</strong></h2><p>在javascript中有一个思想：’一切皆对象’，Notion将这个理念很好的应用在软件中，使用者拥有极高的自由度，可以根据自己的实际需求去定制、去改造，打造适合自己的专属知识库。同时它强大的在线协作功能完美的实现了团队需求，不仅可以编辑文档，同时还支持项目管理、Todo list、日程表、计划清单、音&#x2F;视频播放器…它几乎满足了我对于一个笔记型应用的所有想象，甚至我没想到的地方它也做到了。</p>
<h2 id="Markdown富文本"><a href="#Markdown富文本" class="headerlink" title="Markdown富文本"></a><strong>Markdown富文本</strong></h2><p>其中尤其让我欲罢不能的是它对于Markdown语法的支持，因为被Word和Pages杂乱无章的排版搞的心烦意乱，所以Markdown编辑器Typora一直是我的写作首选。印象笔记和有道云笔记虽然都支持Markdown语法，但是他们都不能直接编辑富文本，只能分成两个屏幕，左边是编辑器，右边是显示效果，由于图片展位等问题经常位置不同步，在软件中的编辑体验糟糕至极，所以我通常是将编辑好的文档直接导入。</p>
<p>而在Notion中，所有的内容直接在编辑器内以富文本显示，不仅让我们可以轻松的使用Markdown语法编辑文字，同时还可以与Notion提供的各种排版、布局方式配合使用，帮助我们排除一切干扰，心无旁骛的专注于写作本身，大大提高了输入效率。它还可以识别几十种代码，通过不同颜色的高亮显示，让代码即清晰易读又整洁美观，对程序员的友好度已经到了’令人发指’的地步。再加上几乎相差无几的快捷方式神助攻，真正实现了所见即所得，让习惯于使用Markdown语法的用户几乎不需要花费太多的学习成本，就可以无缝切换到Notion中。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p>接下来介绍几个Notion中的基本概念，它打破了传统的笔记软件中对于内容的组合方式，以一种革命性的理念颠覆了我们过往对于笔记型应用的认知。</p>
<h3 id="Block（模块）"><a href="#Block（模块）" class="headerlink" title="Block（模块）"></a><strong>Block（模块）</strong></h3><p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_4_20201212025502103.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_4_20201212025502103.gif"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2484592-88054287f90f9cd6.gif?imageMogr2/auto-orient/strip" alt="04.gif"></p>
<p>Notion中的基本对象为Block（模块），它可以是任何形式：表格、文本、网页、代码块、图片、视频、文件或者直接是一个Page（页面），目前Notion中支持的Block类型有23种。</p>
<p>而且Block的操作方式极其简单快捷，直接使用鼠标按住拖拽，就可以随意重新排列它们的位置，免去了繁琐的复制粘贴困扰。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_5_2020121202550356.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_5_2020121202550356.gif"></p>
<p>05.gif</p>
<p>使用拖拽或者Tab键缩进就可以直接定义两段内容的父子级关系，在选中父级的时候它下面对应的所有子级都会被一同选中，页面结构简单清晰，完全可以取代幕布之类的大纲软件。同时使用Toggle List还可以将不需要的内容暂时收起，节省页面空间，让你的思绪更加连贯。</p>
<p>这些内容丰富的Block就像是乐高积木一样，不同的排列组合可以带来不同的可能性。不仅大大降低了排版布局的操作成本，而且给用户带来了强大的操纵感和驾驭感。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_6_20201212025504525.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_6_20201212025504525.gif"></p>
<p>06.gif</p>
<p>有了Notion中的checkbox，基本上就可以抛弃市面上的Todo类App了，我会将每周需要做的事都列在一个Page中，因为Notion拥有非常自由的分栏功能，所以我可以按照自己的个人习惯来布局整个页面，用我最熟悉的方式将我每天的日程进行量化，这样也方便我后期回顾查阅。</p>
<h3 id="Page（页面）"><a href="#Page（页面）" class="headerlink" title="Page（页面）"></a><strong>Page（页面）</strong></h3><p>当我们在记笔记的时候，它们往往并不是独立的知识块，常常需要与其他的文件相互联系、旁征博引，一起构建一个完整的知识体系。使用其他笔记型软件的时候，遇到这种情况就会感觉非常糟心。</p>
<p>而Notion彻底改变了这种局面，在它的理念中，一个笔记就是一个Page，它其实类似于收藏夹的功能。不同的Page之间可以相互嵌套，这种俄罗斯套娃般的无限层级就像一根无形的线，将所有有联系的部分紧紧的拴在一起，形成一个完整而又丰富的知识库。习惯用康奈尔笔记法的同学可以直接使用Notion提供的模版，根据自己的实际需求自定义分栏和层级即可。</p>
<p>同时因为Notion支持直接复制网址嵌入视频，搭配分栏功能，就可以在一个软件中，左边播放教学视频，同时在右边记笔记。而且还可以随时调整左右屏幕的占比。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_7_20201212025505884.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_7_20201212025505884.gif"></p>
<p>08.gif</p>
<p>目前支持比较好的是Youtube这类国外视频网站，不过对于国内Bilibili这种主流的视频网站，也有网友编写的教程，教你如何在笔记中插入视频。如果是本地视频，直接拖拽上传即可。这样当回顾复习的时候，只要打开一个Page，里面所有相关的文字资料、笔记、视频、音频等一切相关的内容就全都涵盖了，妈妈真的再也不用担心我的学习。</p>
<h3 id="Database（数据库）"><a href="#Database（数据库）" class="headerlink" title="Database（数据库）"></a><strong>Database（数据库）</strong></h3><p>Notion的数据库是一个非常强大的板块，它提供了五种不同的展示方式：Table、Board、calendar、List、Gallery，分别对应各种不同的使用场景。同时它支持在这五种展示方式中互相切换，搭配它提供的Filter（过滤）功能，可以按照不同属性生成最适合的展示效果。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_8_20201212025507134.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_8_20201212025507134.gif"></p>
<p>09-Reading list.gif</p>
<p>这里用我每日的阅读列表举例，Database的第一栏是标签栏，可以自定义属性，例如我定义的是：Type（文章类型）、Name（文章名称）、Status（阅读状态）、Score&#x2F;5（文章等级），根据不同的属性我可以快速地检索到不同类型的文章，因为我每天看的东西多且杂，这个功能帮我很好的整理归档阅读资料，方便我日后检索和查找。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_9_20201212025508728.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_9_20201212025508728.gif"></p>
<p>10.gif</p>
<p>因为阅读过的文章已经有一定印象，所以我习惯于把状态为Finished的文章用List的形式展示，Ready to Start的文章用Gallery的形式来展示，这样可以让我在阅读之前更加直观的了解到文章内容。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_10_20201212025509792.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_10_20201212025509792.gif"></p>
<p>11-剪藏.gif</p>
<p>这样做的好处就是可以将散乱在各处的资料做一个统一分类整理，因为我关注的内容比较多，平时主要浏览的平台也比较杂，除了微信、微博这种主流的社交媒体，还会关注一些诸如少数派、Medium、36氪这些优质网站，遇到一些好的内容当下来不及看就想着先收藏下来，等稍后有时间再仔细阅读。但是一个软件一个软件去查又太麻烦，而且常常收藏之后就忘记了，Notion提供的浏览器插件Web Clipper就很好地帮助我解决了这个问题，平时浏览网站时，遇到好文章只需要点击一下，就可以轻松的保存在你指定的文件夹中，因为表格中有阅读状态属性标记，所以也可以监督自己，将这些Database中的文章及时阅读。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_11_20201212025510995.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_11_20201212025510995.png"></p>
<p>其中Notion的Grade Calculator模版简直是一款完美的成绩计算器，因为国外学校的成绩是按照百分比计算总分，它可以设置不同学科的不同占比，同时还可以设置因为晚交而产生的扣分，搭配checkbox设置包含与排除当前学科（未被勾选的学科不计算入总成绩），当我们将所有学科信息输入之后自动会得出结果。它的强大之处就在于将所有的信息集合成一个整体，在Database中你可以上传这门学科的论文、笔记、成绩以及导师反馈，整个学期只用一张表格就可以通通搞定，免去我们查找文件的麻烦。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_12_20201212025512118.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_12_20201212025512118.png"></p>
<p>13.png</p>
<p>Database中的基本板块还是Page，可以根据Page中内容的不同，构建不同的数据库。下面总结一下不同的展示方式适用的不同场景：</p>
<p><strong>Table：用户研究列表、课堂笔记、求职记录、成绩计算器、记账单、课程表、课程计划、习惯追踪、竞品分析、公司报表</strong></p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_13_20201212025512869.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_13_20201212025512869.png"></p>
<p>14.png</p>
<p>Table因为支持自定义丰富的Properties（属性），并且还有计算功能加持，所以特别适合学习和工作等需要处理大量数据等场景，通过合理设置Filter，可以帮我们极大提升按需检索的速度。</p>
<p><strong>List View：会议记录、阅读清单、日记本、产品问答、读书笔记</strong></p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_14_20201212025513869.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_14_20201212025513869.png"></p>
<p>15.png</p>
<p>List View相比Table页面更加简洁干净，没有那么多复杂的条条框框，但是它可以很清晰直观的将重要信息展示出来，也可以按照需要设置属性和过滤器，所以比较适合清单类型的内容。</p>
<p><strong>Gallery：设计资源、阅读清单、团队成员介绍</strong></p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_15_2020121202551540.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_15_2020121202551540.png"></p>
<p>16.png</p>
<p>Gallery的特点就是可以展示缩略图，比较适合以图片为主的内容，例如设计团队需要根据不同的封面区分内容。</p>
<p><strong>Calendar：旅行计划、论文进度表、值日表</strong></p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_16_2020121202551672.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_16_2020121202551672.png"></p>
<p>17.png</p>
<p>Calendar可以让我们直观的看到时间节点，你可以设置时间为某一天，也可以通过添加起止时间来横跨某一个时间段，比较适合有时间跨度的计划类内容。</p>
<p><strong>Board：项目管理、销售管理、旅行清单</strong></p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_17_20201212025516822.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_17_20201212025516822.gif"></p>
<p>18-kanban.gif</p>
<p>习惯于Trello这样项目管理工具的同学对于看板功能肯定不陌生，我们可以按照不同功能将页面划分成不同的栏，在对应的每一栏下面添加卡片。因为Board的卡片支持拖拽，所以我平时除了会用它管理工作进度，同时还将它作为一个规划旅行清单的工具，每打卡完一个目的地就把它放到已去过的一栏，这样可以清晰的显示整个旅行进程。</p>
<h2 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h2><p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_18_20201212025518259.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_18_20201212025518259.gif"></p>
<p>19-History.gif</p>
<p>Notion和Figma一样支持回看历史版本，所以及时文件修改之后反悔了也不用担心，Notion可以轻轻松松帮你时光倒流，回退到你之前的历史版本。这一点跟开发中的Git管理有异曲同工之妙，Notion让我们知道世界上真的有后悔药存在。但是这个功能在免费版本中不支持，需要升级到Personal Pro才可以。</p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a><strong>兼容性</strong></h2><p>在小型智能设备高速发展的今天，我们对于手机的依赖甚至某些时候都超过了电脑，随着办公场景的移动性越来越强，更多的便携设备开始取代笨重的台式机，成为当代人的生产力工具。为了紧跟时代的潮流，软件也需要考虑多平台协作兼容，最理想的状态就是可以让用户存储的资料可以在各个设备之间顺畅切换，无缝衔接。</p>
<p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_19_20201212025519353.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_19_20201212025519353.png"></p>
<p>20.png</p>
<p>Notion在兼容性方面可以说做到了极致，它不仅支持Web端在线访问，同时提供Window、Mac系统本地安装包，Android和IOS系统的手机用户也可以放心使用。可以说只要有网络覆盖的地方，就可以无缝切换，全平台通吃。而且只要你在任何一个设备上修改了内容，其余的所有平台都会实时同步，在web端你甚至都不用刷新网页，Notion真正实现了多端同步。</p>
<p>但是对应的有一个很大的问题就是，因为Notion的文档存储在云端，所以读取速度很大程度上取决于服务器的速度，我在国外使用的时候没有感觉到有明显的延迟，打开和导出的速度都很快。但是据国内用户的使用反馈，目前看来对于大陆区的用户还是不太友好。</p>
<h2 id="模版广场"><a href="#模版广场" class="headerlink" title="模版广场"></a><strong>模版广场</strong></h2><p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_20_20201212025520119.gif" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_20_20201212025520119.gif"></p>
<p>21-template.gif</p>
<p>为了方便新手入门，Notion为大家提供了上百种现成的模版，并且根据不同职业需求做了分类，帮助大家轻松面对工作学习、求职应聘、休闲娱乐、居家生活的各种场景。如果觉得官方提供的用得还不过瘾，可以去网站上的Template Gallery自行挖掘探索，上面有各种网友自己DIY的模版。</p>
<p>Notion就像是一块无限的画布，大家可以在上面肆意的挥洒自己的想象力，最后可能会产生令人意想不到的效果。</p>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a><strong>语言</strong></h2><p>Notion目前有英文版和韩语版两个版本，Notion表示韩国是除美国外国外最大的市场，今年韩国用户数量同比增长了 263%。根据 App Annie 的数据，Notion 排在美韩后的几个主要市场，依次是巴西、俄罗斯和英国，而中国在这个排名中处于相对靠后的位置（这可能和一些人想的不同）。但是因为Notion在Web端也可以访问，所以担心语言问题的小伙伴可以使用Google浏览器的翻译助手，我测试了一下基本翻译的比较准确。</p>
<p>同时我们国内有志愿者成立了Notion中文社区，正在翻译Notion的官方文档，社区里面也有非常丰富的资料，感兴趣的同学可以加入社区，大家一起交流讨论Notion的使用心得。</p>
<h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a><strong>价格</strong></h2><p><img src="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_21_20201212025521401.png" alt="http://image109.360doc.com/DownloadImg/2020/12/1214/209696085_21_20201212025521401.png"></p>
<p>22.png</p>
<p>最后来说一下大家最关心的定价方面，目前个人使用的话是免费的，但是上传文件的空间只有5M，之前限制可以使用1000个Block，更新升级之后个人免费版本也可以无限嵌套Block，Notion真的是一款非常良心的软件了，如果对于文件存储空间没有需求的用户，其实免费版本就完全够用了。使用教育邮箱注册的同学还可以直接升级到Pro，之后就可以无限上传文件，简直不能再香了。</p>
<hr>
<p>我平时的主要存储工具就是移动硬盘、百度网盘和本地磁盘。</p>
<ul>
<li>移动硬盘用于备份比较重要的资料、照片视频等；</li>
<li>百度网盘用于存放学习资料、视频教程、手机照片视频备份等；</li>
<li>本地磁盘用于存放目前在做的工作文件和需要经常查看的文件；</li>
</ul>
<p>现在有了Notion的无限上传空间，同时加上它强大的全平台兼容性，正好完美的填补了我之前存储工具的一块空白，用它来收藏我每日的灵光乍现、记录一些随笔感想再合适不过了，它帮我打破了时间和空间的限制，随时随地，不论是什么设备，打开软件就能写作，真真切切的感受到了科技为我们的生活带来的改变。</p>
<p>Notion在自由度和有序之间找到了一个很好的平衡点，它即为用户提供了灵活的操控性，同时又保证了内容的可读性和视觉美观，最终让所有的东西以最简单直接的方式呈现出来。帮助用户节省整理排版布局的时间，同时让我们的注意力回归创作本身。</p>
<p>虽然它目前还有一些不足和缺陷，但是我们已经能看到这款年轻的软件所展露出的无限潜力和魅力。因为太过于喜欢这款软件的设计，于是去他们的官网查看创始团队的资料，观看他们团队成员录制的视频，在了解了他们越来越多的故事后，我变成了一个彻头彻尾的脑残粉。</p>
<p>23-notionoffice.jpg</p>
<blockquote>
<p>The romantic goal is: Can we make tools that allow people to use computers like a new medium? Can we give that to non-programmers? This topic is getting popular again. It was really popular in the 90s, but somehow people forgot that idea for a couple of decades.</p>
</blockquote>
<p>Notion 的创始人Ivan赵出生于中国，之后去了加拿大。他是一名开发者同时也是一名设计师，从小学的时候就开始学习编程，后来大学的时候迷上了摄影，培养了良好的审美观。一开始的Notion版本还不是很稳定，他跟co-founder搬去了日本京都，将代码重构了一遍，才诞生了现在这个版本。他的美好愿景就是降低技术成本，让不会编程的人们也能用上专业的生产力工具。</p>
<p>虽然Notion赢得了大批用户的追逐，获得了5千万美金的投资，现在市值20亿美金，是硅谷炙手可热的明星创业公司，但是在他们取得如此瞩目的成绩之后并没有急于扩充团队，马上将自己的野心放诸于全球市场，而是专注于产品的提升和改进上，保证团队的敏捷和高效，让每一名员工的个人能力得到最大化的发挥。同时注意倾听用户的声音，每一次的升级和迭代都能为我们带来很大的惊喜。</p>
<p>自从开始使用Notion以来，就一直抑制不住想为它写点什么的冲动，对它的喜爱之情如果不赶紧倾泻出来的话我怕自己会憋坏。这么好的产品，其实一开始就迫不及待的想要分享给大家，之所以等到现在，是因为它的功能实在是太强大了，每当我觉得自己已经完全掌握它的时候，它总会给我带来新的惊喜。</p>
<p>没有遇到Notion之前，所有的信息、资料就像一团没有思绪的乱麻，将我紧紧的包裹其中，我苦苦挣扎却不得其法。其实我已经是个非常注重整理的人了，但是在面对它们的时候我还是觉得无从下手。毫不夸张地说，自从开始使用Notion，我感觉自己的生活都减负了，一下子感觉轻松了许多。同时它也像一个无形的监视者，清空代办事项时的快感激励着我不停的前进，它让我的生活变得充实且忙碌。</p>
<p>现在，它对于我来说，已经不仅仅只是一个简单的记笔记的地方。在这里我会记录每天的所思所感，规划自己的成长计划，制定每日的任务清单，整理各种学习资料，它记录了我的喜怒哀乐、成长进步。同时它还帮助我把事物的逻辑理顺，让我在思考的时候思维更加清晰缜密，行动时更加高效快捷，并且它还帮助我找到了人生方向。</p>
<p>工具的本质是帮助人们提升做事的效率，如果在这个过程中还可以帮助用户进一步思考、改善思维方式，那么我想这样的产品已经不仅仅是用「优秀」可以来形容的了。我的人生目标，就是希望自己有一天，也能做出一款像Notion一样，真正改变人们生活的产品，而且是一种积极的改变，我希望它可以让人们的生活更加美好。</p>
<p><strong>说出来会被嘲笑的梦想，才有实现的价值。</strong></p>
<p>虽然外面的世界变化很快，人们每天都在为了不同的人生目标奔波劳碌，有的人追名有的人逐利。为了实现自己的目标，人们开发出各种各样的软件，有的希望占用用户更多的时间和注意力，有的希望掏空用户的钱包和银行卡，但是这些都不能打扰我内心的节奏，纵使这个过程可能孤独无比，只要拥有了坚定淡泊的心智，我相信我也可以从容应对接下来的人生旅途。</p>
<p>就像Notion一样，<strong>不模仿别人，不重复自己。</strong></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>Knowledgehub</tag>
        <tag>mission mangerg</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-第2章-新手必须掌握的Linux命令-常用系统工作命令</title>
    <url>/2022/06/02/%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%96%B0%E6%89%8B%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4-%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>[南月晨的blog](<a href="https://leiyu-code.github.io/">南月晨的博客 (leiyu-code.github.io)</a>)</strong></p>
<p>leiyu-code.github.io</p>
<p><a href="https://www.linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></p>
<ul>
<li>长格式与短格式</li>
</ul>
<p><em><strong>在Linux系统中的命令参数有长短格式之分，长格式和长格式之间不能合并，长格式和短格式之间也不能合并，但短格式和短格式之间是可以合并的，合并后仅保留一个减号（-）即可。另外ps命令可允许参数不加减号（-），因此可直接写成ps aux的样子</strong></em></p>
<ul>
<li>强大好用的shell</li>
</ul>
<p><a href="https://www.linuxprobe.com/wp-content/uploads/2020/05/%E7%94%A8%E6%88%B7%E4%B8%8E%E7%A1%AC%E4%BB%B6-1.jpg"><img src="https://www.linuxprobe.com/wp-content/uploads/2020/05/%E7%94%A8%E6%88%B7%E4%B8%8E%E7%A1%AC%E4%BB%B6-1.jpg" alt="第2章 新手必须掌握的Linux命令第2章 新手必须掌握的Linux命令"></a></p>
<p>Base解释器（Bourne-Again SHell)</p>
<p>用户通过服务程序来与电脑对话</p>
<hr>
<span id="more"></span>

<ul>
<li>执行命令的必备知识</li>
</ul>
<p>常见的Linux命令的格式：</p>
<p><strong>命令名称 [命令参数] [命令对象]</strong></p>
<p>命令参数的长格式与短格式</p>
<table>
<thead>
<tr>
<th align="left">长格式</th>
<th align="left">man –help</th>
</tr>
</thead>
<tbody><tr>
<td align="left">短格式</td>
<td align="left">man -h</td>
</tr>
</tbody></table>
<p><em><strong>命令名称、命令参数与命令对象之间要用空格进行分隔，且字母严格区分大小写</strong></em></p>
<hr>
<ul>
<li>man命令的常用操作按键及其作用</li>
</ul>
<table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空格键</td>
<td align="left">向下翻一页</td>
</tr>
<tr>
<td align="left">PaGe down</td>
<td align="left">向下翻一页</td>
</tr>
<tr>
<td align="left">PaGe up</td>
<td align="left">向上翻一页</td>
</tr>
<tr>
<td align="left">home</td>
<td align="left">直接前往首页</td>
</tr>
<tr>
<td align="left">end</td>
<td align="left">直接前往尾页</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">从上至下搜索某个关键词，如“&#x2F;linux”</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">从下至上搜索某个关键词，如“?linux”</td>
</tr>
<tr>
<td align="left">n</td>
<td align="left">定位到下一个搜索到的关键词</td>
</tr>
<tr>
<td align="left">N</td>
<td align="left">定位到上一个搜索到的关键词</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">退出帮助文档</td>
</tr>
</tbody></table>
<ul>
<li>man命令中帮助信息的结构以及意义</li>
</ul>
<table>
<thead>
<tr>
<th align="left">结构名称</th>
<th align="left">代表意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NAME</td>
<td align="left">命令的名称</td>
</tr>
<tr>
<td align="left">SYNOPSIS</td>
<td align="left">参数的大致使用方法</td>
</tr>
<tr>
<td align="left">DESCRIPTION</td>
<td align="left">介绍说明</td>
</tr>
<tr>
<td align="left">EXAMPLES</td>
<td align="left">演示（附带简单说明）</td>
</tr>
<tr>
<td align="left">OVERVIEW</td>
<td align="left">概述</td>
</tr>
<tr>
<td align="left">DEFAULTS</td>
<td align="left">默认的功能</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td align="left">具体的可用选项（带介绍）</td>
</tr>
<tr>
<td align="left">ENVIRONMENT</td>
<td align="left">环境变量</td>
</tr>
<tr>
<td align="left">FILES</td>
<td align="left">用到的文件</td>
</tr>
<tr>
<td align="left">SEE ALSO</td>
<td align="left">相关的资料</td>
</tr>
<tr>
<td align="left">HISTORY</td>
<td align="left">维护历史与联系方式</td>
</tr>
</tbody></table>
<ul>
<li>额外的4个快捷键&#x2F;组合键小技巧</li>
</ul>
<p><em><strong>TAB键 补全命令</strong></em></p>
<p><em><strong>ctrl+c组合键</strong></em> 终止当前的进程</p>
<p><em><strong>ctrl+d组合键 键盘输入结束</strong></em></p>
<p><em><strong>ctrl+l组合键 清屏</strong></em></p>
<hr>
<ul>
<li>常用系统工作命令</li>
</ul>
<p><strong>echo命令</strong></p>
<p>echo [字符串] [$变量]</p>
<p><strong>date命令</strong></p>
<p>date [+指定的格式]</p>
<p>date命令中的参数及其作用</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%S</td>
<td align="left">秒（00～59）</td>
</tr>
<tr>
<td align="left">%M</td>
<td align="left">分钟（00～59）</td>
</tr>
<tr>
<td align="left">%H</td>
<td align="left">小时（00～23）</td>
</tr>
<tr>
<td align="left">%I</td>
<td align="left">小时（00～12）</td>
</tr>
<tr>
<td align="left">%m</td>
<td align="left">月份（1~12）</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">显示出AM或PM</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">缩写的工作日名称（例如：Sun）</td>
</tr>
<tr>
<td align="left">%A</td>
<td align="left">完整的工作日名称（例如：Sunday）</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">缩写的月份名称（例如：Jan）</td>
</tr>
<tr>
<td align="left">%B</td>
<td align="left">完整的月份名称（例如：January）</td>
</tr>
<tr>
<td align="left">%q</td>
<td align="left">季度（1~4）</td>
</tr>
<tr>
<td align="left">%y</td>
<td align="left">简写年份（例如：20）</td>
</tr>
<tr>
<td align="left">%Y</td>
<td align="left">完整年份（例如：2020）</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">本月中的第几天</td>
</tr>
<tr>
<td align="left">%j</td>
<td align="left">今年中的第几天</td>
</tr>
<tr>
<td align="left">%n</td>
<td align="left">换行符（相当于按下回车键）</td>
</tr>
<tr>
<td align="left">%t</td>
<td align="left">跳格（相当于按下Tab键）</td>
</tr>
</tbody></table>
<p><strong>timedatectl命令</strong></p>
<p>timedatectl [参数]</p>
<p>timedatectl命令中的参数以及作用</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">status</td>
<td align="left">显示状态信息</td>
</tr>
<tr>
<td align="left">list-timezones</td>
<td align="left">列出已知时区</td>
</tr>
<tr>
<td align="left">set-time</td>
<td align="left">设置系统时间</td>
</tr>
<tr>
<td align="left">set-timezone</td>
<td align="left">设置生效时区</td>
</tr>
</tbody></table>
<p><strong>reboot命令</strong></p>
<p>重启系统命令</p>
<p><strong>poweroff命令</strong></p>
<p>关闭系统命令</p>
<p><strong>wget命令</strong></p>
<p>wget [参数] 网址</p>
<p>wget命令中的参数以及作用</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">后台下载模式</td>
</tr>
<tr>
<td align="left">-P</td>
<td align="left">下载到指定目录</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">最大尝试次数</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">断点续传</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">下载页面内所有资源，包括图片、视频等</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">递归下载</td>
</tr>
</tbody></table>
<p><strong>ps命令</strong></p>
<p>ps [参数]</p>
<p>ps命令中的参数以及作用</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left">显示所有进程（包括其他用户的进程）</td>
</tr>
<tr>
<td align="left">-u</td>
<td align="left">用户以及其他详细信息</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">显示没有控制终端的进程</td>
</tr>
</tbody></table>
<p>常见进程状态及进程补充形式</p>
<blockquote>
<p><strong>R（运行）</strong>：进程正在运行或在运行队列中等待。</p>
<p><strong>S（中断）</strong>：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该 状态。</p>
<p><strong>D（不可中断）</strong>：进程不响应系统异步信号，即便用kill命令也不能将其中断。</p>
<p><strong>Z（僵死）</strong>：进程已经终止，但进程描述符依然存在, 直到父进程调用wait4()系统函数后将进程释放。</p>
<p><strong>T（停止）</strong>：进程收到停止信号后停止运行。</p>
</blockquote>
<p>除了上面5种常见的进程状态，还有可能是高优先级（&lt;）、低优先级（N）、被锁进内存（L）、包含子进程（s）以及多线程（l）这5种补充形式。</p>
<ul>
<li>pstree命令</li>
</ul>
<p>以树状图的形式展示进程之间的关系</p>
<ul>
<li>top命令</li>
</ul>
<p>动态地监视进程活动及系统负载等信息</p>
<p><a href="https://www.linuxprobe.com/wp-content/uploads/2020/05/top%E5%91%BD%E4%BB%A4-1024x648.png"><img src="https://www.linuxprobe.com/wp-content/uploads/2020/05/top%E5%91%BD%E4%BB%A4-1024x648.png" alt="第2章 新手必须掌握的Linux命令第2章 新手必须掌握的Linux命令"></a></p>
<p>top命令执行结果的前5行为系统整体的统计信息，其所代表的含义如下。</p>
<blockquote>
<p>第1行：系统时间、运行时间、登录终端数、系统负载（3个数值分别为1分钟、5分钟、15分钟内的平均值，数值越小意味着负载越低）。</p>
<p>第2行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</p>
<p>第3行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。其中数据均为CPU数据并以百分比格式显示，例如“99.9 id”意味着有99.9%的CPU处理器资源处于空闲。</p>
<p>第4行：物理内存总量、内存空闲量、内存使用量、作为内核缓存的内存量。</p>
<p>第5行：虚拟内存总量、虚拟内存空闲量、虚拟内存使用量、已被提前加载的内存量。</p>
</blockquote>
<p><strong>nice命令</strong></p>
<p>调整进程的优先级</p>
<p>nice优先级数字 服务名称</p>
<p><strong>pidof命令</strong></p>
<p>查询某个指定服务进程的PID号码值</p>
<p>pidof [参数] 服务名称</p>
<p><strong>kill命令</strong></p>
<p>终止某个指定PID值的服务进程</p>
<p>kill [参数] 进程的PID</p>
<p><strong>killall命令</strong></p>
<p>killall [参数] 服务名称</p>
<p>终止某个指定名称的服务所对应的全部进程</p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 第1章 动手部署一台Linux操作系统</title>
    <url>/2022/06/02/%E7%AC%94%E8%AE%B0-%E7%AC%AC1%E7%AB%A0-%E5%8A%A8%E6%89%8B%E9%83%A8%E7%BD%B2%E4%B8%80%E5%8F%B0Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><strong>工欲善其事，必先利其器</strong></p>
<ul>
<li>注意：配置的系统环境最好和老师的系统环境一致</li>
</ul>
<p><em><strong>随书配套的软件资源可通过：(<a href="https://www.linuxprobe.com/tools/">https://www.linuxprobe.com/tools/</a>) 下载。</strong></em></p>
<p><strong>VmwareWorkStation 16 ——虚拟机软件（必需）</strong>：</p>
<p>这是一款功能强大的桌面虚拟计算机软件，能够让用户在单一主机同时运行多个不同的操作系统；同时支持实时快照、虚拟网络、拖曳文件以及PXE等强悍功能。</p>
<p><strong>RedHatEnterpriseLinux [RHEL] 8 ——<a href="https://www.linuxprobe.com/">红帽</a>操作系统（必需）：</strong></p>
<p>由开源软件及全球服务型系统开发商<a href="https://www.linuxprobe.com/">红帽</a>公司出品，是一款相当稳定、出色的Linux操作系统。</p>
<hr>
<p>安装过程：略</p>
<span id="more"></span>

<p><a href="https://www.linuxprobe.com/basic-learning-01.html">第1章 动手部署一台Linux操作系统 | 《Linux就该这么学》 (linuxprobe.com)</a></p>
<ul>
<li>在虚拟机里安装Linux时一定不要直接安装Linux系统，而是要选择稍后安装Linux系统</li>
<li>CPU需要支持VT（Virtualization Technology，虚拟化技术）</li>
</ul>
<p><a href="https://www.linuxprobe.com/wp-content/uploads/2020/05/BIOS.png"><img src="https://www.linuxprobe.com/wp-content/uploads/2020/05/BIOS.png" alt="第1章 动手部署一台Linux操作系统第1章 动手部署一台Linux操作系统"></a></p>
<ul>
<li><em><strong>虚拟机的网络模式</strong></em></li>
</ul>
<p>VMware Workstation这款虚拟机软件为用户提供了3种可选的网络模式，分别为“使用桥接网络”“使用网络地址转换（NAT）”与“使用仅主机模式网络”。</p>
<blockquote>
<p><strong>使用桥接网络</strong>：相当于在物理机与虚拟机网卡之间架设了一座桥梁，从而可以通过物理主机的网卡访问外网。</p>
<p><strong>使用网络地址转换（NAT）</strong>：让VM虚拟机的网络服务发挥路由器的作用，使得通过虚拟机软件模拟的主机可以通过物理主机访问外网；在物理机中对应的物理网卡是VMnet8。</p>
<p><strong>使用仅主机模式网络</strong>：仅让虚拟机的系统与物理主机通信，不能访问外网；在物理机中对应的物理网卡是VMnet1。</p>
</blockquote>
<ul>
<li><strong>linux中软件的安装方式</strong></li>
</ul>
<p>RPM 常用的RPM软件包命令</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">rpm -ivh filename.rpm</td>
<td align="left">安装软件</td>
</tr>
<tr>
<td align="left">rpm -Uvh filename.rpm</td>
<td align="left">升级软件</td>
</tr>
<tr>
<td align="left">rpm -e filename.rpm</td>
<td align="left">卸载软件</td>
</tr>
<tr>
<td align="left">rpm -qpi filename.rpm</td>
<td align="left">查询软件描述信息</td>
</tr>
<tr>
<td align="left">rpm -qpl filename.rpm</td>
<td align="left">列出软件文件信息</td>
</tr>
<tr>
<td align="left">rpm -qf filename</td>
<td align="left">查询文件属于哪个RPM</td>
</tr>
</tbody></table>
<p>Yum 常见的Yum命令</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">yum repolist all</td>
<td align="left">列出所有仓库</td>
</tr>
<tr>
<td align="left">yum list all</td>
<td align="left">列出仓库中所有软件包</td>
</tr>
<tr>
<td align="left">yum info 软件包名称</td>
<td align="left">查看软件包信息</td>
</tr>
<tr>
<td align="left">yum install 软件包名称</td>
<td align="left">安装软件包</td>
</tr>
<tr>
<td align="left">yum reinstall 软件包名称</td>
<td align="left">重新安装软件包</td>
</tr>
<tr>
<td align="left">yum update 软件包名称</td>
<td align="left">升级软件包</td>
</tr>
<tr>
<td align="left">yum remove 软件包名称</td>
<td align="left">移除软件包</td>
</tr>
<tr>
<td align="left">yum clean all</td>
<td align="left">清除所有仓库缓存</td>
</tr>
<tr>
<td align="left">yum check-update</td>
<td align="left">检查可更新的软件包</td>
</tr>
<tr>
<td align="left">yum grouplist</td>
<td align="left">查看系统中已经安装的软件包组</td>
</tr>
<tr>
<td align="left">yum groupinstall 软件包组</td>
<td align="left">安装指定的软件包组</td>
</tr>
<tr>
<td align="left">yum groupremove 软件包组</td>
<td align="left">移除指定的软件包组</td>
</tr>
<tr>
<td align="left">yum groupinfo 软件包组</td>
<td align="left">查询指定的软件包组信息</td>
</tr>
</tbody></table>
<p><em><strong>dnf install软件包名称</strong></em></p>
<hr>
<ul>
<li>老旧版本的初始化及服务的区别</li>
</ul>
<p>Linux系统在启动时要进行大量的初始化工作，比如挂载文件系统和交换分区、启动各类进程服务等，这些都可以看作是一个一个的单元（unit），systemd用目标（target）代替了System V init中运行级别的概念，这两者的区别如表1-3所示。</p>
<p>表1-3 systemd与System V init的区别以及作用</p>
<table>
<thead>
<tr>
<th align="left">System V init运行级别</th>
<th align="left">systemd目标名称</th>
<th align="left">systemd 目标作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">poweroff.target</td>
<td align="left">关机</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">rescue.target</td>
<td align="left">单用户模式</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">multi-user.target</td>
<td align="left">多用户的文本界面</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">multi-user.target</td>
<td align="left">多用户的文本界面</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">multi-user.target</td>
<td align="left">多用户的文本界面</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">graphical.target</td>
<td align="left">多用户的图形界面</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">reboot.target</td>
<td align="left">重启</td>
</tr>
<tr>
<td align="left">emergency</td>
<td align="left">emergency.target</td>
<td align="left">救援模式</td>
</tr>
</tbody></table>
<p>如果想要将系统默认的运行目标修改为“多用户的文本界面”模式，可直接用ln命令把多用户模式目标文件链接到&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]# ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure>

<p>如果有读者之前学习过RHEL 5&#x2F;6系统，或者已经习惯使用service、chkconfig等命令来管理系统服务，那么现在就比较郁闷了，因为在RHEL 7&#x2F;8系统中是使用systemctl命令来管理服务的。表1-4和表1-5所示为新老版本系统的对比，您可以先大致了解一下，后续章节中会经常用到它们。</p>
<p>表1-4 服务的启动、重启、停止、重载、查看状态等常用命令</p>
<table>
<thead>
<tr>
<th align="left">老系统命令</th>
<th align="left">新系统命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">service foo start</td>
<td align="left">systemctl start httpd</td>
<td align="left">启动服务</td>
</tr>
<tr>
<td align="left">service foo restart</td>
<td align="left">systemctl restart httpd</td>
<td align="left">重启服务</td>
</tr>
<tr>
<td align="left">service foo stop</td>
<td align="left">systemctl stop httpd</td>
<td align="left">停止服务</td>
</tr>
<tr>
<td align="left">service foo reload</td>
<td align="left">systemctl reload httpd</td>
<td align="left">重新加载配置文件（不终止服务）</td>
</tr>
<tr>
<td align="left">service foo status</td>
<td align="left">systemctl status httpd</td>
<td align="left">查看服务状态</td>
</tr>
</tbody></table>
<p>表1-5 服务开机启动、不启动、查看各级别下服务启动状态等常用命令</p>
<table>
<thead>
<tr>
<th align="left">老系统命令</th>
<th align="left">新系统命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">chkconfig foo on</td>
<td align="left">systemctl enable httpd</td>
<td align="left">开机自动启动</td>
</tr>
<tr>
<td align="left">chkconfig foo off</td>
<td align="left">systemctl disable httpd</td>
<td align="left">开机不自动启动</td>
</tr>
<tr>
<td align="left">chkconfig foo</td>
<td align="left">systemctl is-enabled httpd</td>
<td align="left">查看特定服务是否为开机自启动</td>
</tr>
<tr>
<td align="left">chkconfig –list</td>
<td align="left">systemctl list-unit-files –type&#x3D;httpd</td>
<td align="left">查看各个级别下服务的启动与禁用情况</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>重置Linux系统的root密码</li>
</ul>
<p>重启Linux系统主机并出现引导界面时，按下键盘上的e键进入内核编辑界面，如图1-50所示。</p>
<p>Linux系统的引导界面</p>
<p>在linux参数这行的最后面追加rd.break参数，然后按下Ctrl + X组合键运行修改过的内核程序，如图1-51所示。</p>
<p>大约30秒过后，系统会进入紧急救援模式，如图1-52所示。</p>
<p>Linux系统的紧急救援模式</p>
<p>然后依次输入以下命令，再连续按下两次Ctrl + D组合键盘来退出并重启。等待系统再次重启完毕后便可以使用新密码登录Linux系统。这一系列命令的执行效果如图1-53所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br><span class="line">chroot /sysroot</span><br><span class="line">passwd</span><br><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure>

<p>重置Linux系统的管理员密码</p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-第2章-新手必须掌握的Linux命令-系统状态检测命令</title>
    <url>/2022/06/02/%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%96%B0%E6%89%8B%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4-%E7%B3%BB%E7%BB%9F%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>[南月晨的blog](<a href="https://leiyu-code.github.io/">南月晨的博客 (leiyu-code.github.io)</a>)</strong></p>
<p>leiyu-code.github.io</p>
<p><a href="https://www.linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></p>
<p><strong>本节讲解与网卡网络、系统内核、系统负载、内存使用情况、当前启用终端数量、历史登录记录、命令执行记录以及救援诊断等相关命令的使用方法。</strong></p>
<span id="more"></span>

<ul>
<li><p><strong>ifconfig</strong></p>
<p>ifconfig [参数] [网络设备]</p>
<p>用于获取网卡配置与网络状态等信息，英文全称为“interface config”</p>
</li>
<li><p><strong>uname</strong></p>
<p>uname [-a]</p>
<p>用于查看系统内核版本与系统架构等信息</p>
</li>
<li><p><strong>uptime</strong>    </p>
<p>用于查看系统的负载信息</p>
<p>建议负载值保持在1，生产环境中不能超过5</p>
</li>
<li><p><strong>free</strong></p>
<p>free [-h]</p>
<p>用于显示当前系统中内存的使用量信息</p>
</li>
<li><p><strong>who</strong></p>
<p>用于查看当前登入主机的用户终端信息</p>
</li>
<li><p><strong>last</strong></p>
<p>用于查看当前登入主机的用户终端信息</p>
</li>
<li><p><strong>ping</strong></p>
<p>ping [参数] 主机地址</p>
<p>用于测试主机之间的网络连通性</p>
<p>表2-11                         ping命令中的参数以及作用</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>总共发送次数</td>
</tr>
<tr>
<td>-l</td>
<td>指定网卡名称</td>
</tr>
<tr>
<td>-i</td>
<td>每次间隔时间（秒）</td>
</tr>
<tr>
<td>-W</td>
<td>最长等待时间（秒）</td>
</tr>
</tbody></table>
</li>
<li><p><strong>tracepath</strong></p>
<p>tracepath [参数] 域名</p>
<p>用于显示数据包到达目的主机时途中经过的所有路由信息</p>
</li>
<li><p><strong>netstat</strong></p>
<p>netstat [参数]</p>
<p>用于显示如网络连接、路由表、接口状态等的网络相关信息，英文全称为“network status”</p>
<p>表2-12                         netstat命令中的参数以及作用</p>
<table>
<thead>
<tr>
<th>-a</th>
<th>显示所有连接中的Socket</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>显示正在使用的Socket信息</td>
</tr>
<tr>
<td>-t</td>
<td>显示TCP协议的连接状态</td>
</tr>
<tr>
<td>-u</td>
<td>显示UDP协议的连接状态</td>
</tr>
<tr>
<td>-n</td>
<td>使用IP地址，不使用域名</td>
</tr>
<tr>
<td>-l</td>
<td>仅列出正在监听的服务状态</td>
</tr>
<tr>
<td>-i</td>
<td>显示网卡列表信息</td>
</tr>
<tr>
<td>-r</td>
<td>显示路由表信息</td>
</tr>
</tbody></table>
</li>
<li><p><strong>history</strong></p>
<p>history [-c]</p>
<p>用于显示执行过的命令历史</p>
<p><em><strong>tec:可以自定义&#x2F;etc&#x2F;profile文件中的HISTSIZE变量值，即自定义存储多少条执行过的历史命令</strong></em></p>
<p><em><strong>历史命令会被保存到用户家目录中的.bash_history文件中。Linux系统中以点（.）开头的文件均代表隐藏文件，这些文件大多数为系统服务文件，可以用cat命令查看其文件内容：</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]# cat ~/.bash_history</span><br></pre></td></tr></table></figure>

<p><em><strong>要清空当前用户在本机上执行的Linux命令历史记录信息，可执行如下命令：</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]# history -c</span><br></pre></td></tr></table></figure>


</li>
<li><p>sosreport</p>
<p>收集系统配置及架构信息并输出诊断文档</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-第二章新手必须掌握的Linux命令-文件目录管理命令</title>
    <url>/2022/06/02/%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%96%B0%E6%89%8B%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>1．touch 命令</strong> </p>
<p>touch 命令用于创建空白文件或设置文件的时间，格式为“touch [选项] [文件]”。 </p>
<p><strong>mkdir 命令</strong> </p>
<p>mkdir 命令用于创建空白的目录，格式为“mkdir [选项] 目录”。 在 Linux 系统中，文件夹是常见的文件类型之一。除了能创建单个空白目录外，mkdir 命令还可以结合-p 参数来递归创建出具有嵌套叠层关系的文件目录。</p>
<p><strong>3．cp 命令</strong> </p>
<p>cp 命令用于复制文件或目录，格式为“cp [选项] 源文件 目标文件”。 大家对文件复制操作应该不陌生，在 Linux 系统中，复制操作具体分为 3 种情况： </p>
<p><strong>4．mv 命令</strong> </p>
<p>mv 命令用于剪切文件或将文件重命名，格式为“mv [选项] 源文件 [目标路径|目标文件名]” 。</p>
<p> 剪切操作不同于复制操作，因为它会默认把源文件删除掉，只保留剪切后的文件。如果 在同一个目录中对一个文件进行剪切操作，其实也就是对其进行重命名：</p>
<p><strong>5．rm 命令</strong> </p>
<p>rm 命令用于删除文件或目录，格式为“rm [选项] 文件”。 在 Linux 系统中删除文件时，系统会默认向您询问是否要执行删除操作，如果不想总是 看到这种反复的确认信息，可在 rm 命令后跟上-f 参数来强制删除。另外，想要删除一个目录， 需要在 rm 命令后面一个-r 参数才可以，</p>
<p><strong>6. dd 命令</strong> </p>
<p>dd 命令用于按照指定大小和个数的数据块来复制文件或转换文件，格式为“dd [参数]” 。 </p>
<p>但在 Linux 系统中可以直接 使用 dd 命令来压制出光盘镜像文件，将它编程一个可立即使用的 iso 镜像：</p>
<p>[root@liruilong liruilong]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;560_file count&#x3D;1 bs&#x3D;60M</p>
<p>1+0 records in</p>
<p>1+0 records out</p>
<p>62914560 bytes (63 MB) copied, 0.106262 s, 592 MB&#x2F;s</p>
<p>[root@liruilong liruilong]# ls</p>
<p>560_file liruilong.html lirui.txt</p>
<p>[root@liruilong liruilong]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;Demo.iso</p>
<p>下面举一个吃货的例子进行 解释。假设小明的饭量（即需求）是一个固定的值，用来盛饭的勺子的大小即 bs 块大小， 而用勺子盛饭的次数即 count 块个数。小明要想吃饱（满足需求），则需要在勺子大小（bs 块大小）与用勺子盛饭的次数（count 块个数）之间进行平衡。勺子越大，用勺子盛饭的次数 就越少。有上可见，bs 与 count 都是用来指定容量的大小，只要能满足需求，可随意组合搭 配方式。</p>
<p><strong>7．file 命令</strong> </p>
<p>file 命令用于查看文件的类型，格式为“file 文件名”。 在 Linux 系统中，由于文本、目录、设备等所有这些一切都统称为文件</p>
<p>[root@liruilong liruilong]# file 60_file</p>
<p>60_file: data</p>
<p>[root@liruilong liruilong]# file Demo.iso</p>
<p>Demo.iso: data</p>
<p>[root@liruilong liruilong]# file lirui.txt</p>
<p>lirui.txt: UTF-8 Unicode text, with very long lines</p>
<p>[root@liruilong liruilong]#</p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-第二章新手必须掌握的Linux命令-文本文件编辑命令</title>
    <url>/2022/06/02/%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%96%B0%E6%89%8B%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84Linux%E5%91%BD%E4%BB%A4-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>[南月晨的blog](<a href="https://leiyu-code.github.io/">南月晨的博客 (leiyu-code.github.io)</a>)</strong></p>
<p>leiyu-code.github.io</p>
<p><a href="https://linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></p>
<p> <strong>1．cat 命令</strong> </p>
<p>cat 命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。 Linux 系统中有多个用于查看文本内容的命令，每个命令都有自己的特点，比如这个 cat 命令就是用于查看内容较少的纯文本文件的。cat 这个命令也很好记，</p>
<p><strong>2．more 命令</strong> </p>
<p>more 命令用于查看纯文本文件（内容较多的），格式为“more [选项]文件”。 </p>
<p><strong>3．head 命令</strong> </p>
<p>head 命令用于查看纯文本文档的前 N 行，格式为“head [选项] [文件]”。 </p>
<span id="more"></span>

<p>[root@liruilong ~]# head nohup.out</p>
<p>.  ____     _      __ _ _</p>
<p>&#x2F;\ &#x2F; __<em>‘</em> __ _ <em>(</em>)_ __ __ _ \ \ \ \</p>
<p>( ( )___ | ‘_ | ‘<em>| | ‘</em> / _&#96; | \ \ \ \</p>
<p>\&#x2F; __<em>)| |</em>)| | | | | || (_| | ) ) ) )</p>
<p>‘ |<em><em><strong>| .</strong>|</em>| |<em>|</em>| |</em>__, | &#x2F; &#x2F; &#x2F; &#x2F;</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|<em>|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|</em>_<em>&#x2F;&#x3D;&#x2F;</em>&#x2F;<em>&#x2F;</em>&#x2F;</p>
<p>:: Spring Boot ::    (v2.2.2.RELEASE)</p>
<p>2020-02-29 22:25:39.873 INFO 20912 — [      main] com.liruilong.hros.HrosApplication    : Starting HrosApplication v0.0.1-SNAPSHOT on liruilong with PID 20912 (&#x2F;root&#x2F;hros-0.0.1-SNAPSHOT.jar started by root in &#x2F;root)</p>
<p>[root@liruilong ~]# tail nohup.out</p>
<p>2020-07-05 21:13:17.014 INFO 6470 — [MessageBroker-1] o.s.w.s.c.WebSocketMessageBrokerStats  : WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 212 total, 1 closed abnormally (1 connect failure, 0 send limit, 28 transport error)], stompSubProtocol[processed CONNECT(210)-CONNECTED(210)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size &#x3D; 0, active threads &#x3D; 0, queued tasks &#x3D; 0, completed tasks &#x3D; 1929], outboundChannel[pool size &#x3D; 0, active threads &#x3D; 0, queued tasks &#x3D; 0, completed tasks &#x3D; 460], sockJsScheduler[pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 1, completed tasks &#x3D; 1946024]</p>
<p><strong>4．tail 命令</strong> </p>
<p>tail 命令用于查看纯文本文档的后 N 行或持续刷新内容，格式为“tail [选项] [文件]”。 只需要执行“tail -n 20 文件名”命令</p>
<p>tail 命令强悍的功能是可以持续刷新一个文件的内容，当想要实时 查看新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”： </p>
<p><strong>5．tr 命令</strong> </p>
<p>tr 命令用于替换文本文件中的字符，格式为“tr [原始字符] [目标字符]”。 </p>
<p><strong>6．wc 命令</strong> </p>
<p>wc 命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。 </p>
<p><strong>7．stat 命令</strong> </p>
<p>stat 命令用于查看文件的具体存储信息和时间等信息，格式为“stat 文件名称”。 </p>
<p>[root@liruilong ~]# stat nohup.out</p>
<p>File: ‘nohup.out’</p>
<p>Size: 612547045    Blocks: 1196392  IO Block: 4096  regular file</p>
<p>Device: fd01h&#x2F;64769d  Inode: 132546   Links: 1</p>
<p>Access: (0600&#x2F;-rw——-) Uid: (  0&#x2F;  root)  Gid: (  0&#x2F;  root)</p>
<p>Access: 2020-10-11 08:49:04.564740893 +0800</p>
<p>Modify: 2020-07-05 21:54:05.297348682 +0800</p>
<p>Change: 2020-07-05 21:54:05.297348682 +0800</p>
<p>Birth: -</p>
<p><strong>8．cut 命令</strong> </p>
<p>cut 命令用于按“列”提取文本字符，格式为“cut [参数] 文本”。</p>
<p> <strong>9．diff 命令</strong> </p>
<p>diff 命令用于比较多个文本文件的差异，格式为“diff [参数] 文件”。 </p>
<p>在使用 diff 命令时，不仅可以使用–brief 参数来确认两个文件是否不同，还可以使用-c 参数来详细比较出多个文件的差异之处，这绝对是判断文件是否被篡改的有力神器。例如， 先使用 cat 命令分别查看 diff_A.txt 和 diff_B.txt 文件的内容，然后进行比较：</p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记 Linux就该这么学-第零章 为什么要学习Linux</title>
    <url>/2022/05/23/%E7%AC%94%E8%AE%B0-Linux%E5%B0%B1%E8%AF%A5%E8%BF%99%E4%B9%88%E5%AD%A6-%E7%AC%AC0%E7%AB%A0-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0Linux/</url>
    <content><![CDATA[<h3 id="前言-为什么要学习Linux"><a href="#前言-为什么要学习Linux" class="headerlink" title="前言 为什么要学习Linux"></a>前言 为什么要学习Linux</h3><ul>
<li>养成在学习、工作、生活中得到快乐的习惯</li>
</ul>
<p>工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从劳苦与艰辛中渗出。因此，世上没有哪种喜悦可以与我们聚精会神，孜孜不倦，克服艰辛后达到目标时的成就感。</p>
<p>更何况人类生活中工作占据了较大的比重，如果不能从劳动中、工作中获得充实感，那么即使从别的地方找到快乐，最终我们仍然会感到空虚和缺憾。</p>
<p><strong>稻盛和夫</strong></p>
<span id="more"></span>

<ul>
<li>开源</li>
</ul>
<p>软件的源代码只由编写者拥有，而开源（即开放源代码，Open Source Code）是指一种更自由的软件发布模式。简单来说，开源软件的特点就是把软件程序和源代码文件一起打包提供给用户，让用户在不受限制地使用某个软件功能的基础上还可以对代码按需修改，让软件更贴合硬件环境，让功能更符合工作需求。用户还可以将其编制成衍生产品再发布出去。用户一般享有使用自由、复制自由、修改自由、创建衍生品自由，以及收费自由。</p>
<ul>
<li>开源许可证总览</li>
</ul>
<p><a href="https://opensource.org/licenses/alphabetical">https://opensource.org/licenses/alphabetical</a></p>
<ul>
<li>自由软件基金会</li>
</ul>
<p>自由软件基金会（Free Software Foundation，FSF）是一个非营利组织，其使命是在全球范围内促进计算机用户的自由，捍卫所有软件用户的权利。。</p>
<ul>
<li>选择适合自己的开源许可</li>
</ul>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/04/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9%E6%B5%81%E7%A8%8B%E5%9B%BE-1.jpg" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p>开源许可证的选择流程图</p>
<ul>
<li>为什么要学习Linux</li>
</ul>
<p><em><strong>Linux的优势</strong></em></p>
<p><strong><img src="https://www.linuxprobe.com/wp-content/uploads/2015/01/linux-windows.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></strong></p>
<p>开源软件便具备了4大关键性优势:</p>
<p><strong>低风险</strong>：使用闭源软件无疑把命运交付给他人，一旦封闭的源代码没有人来维护，您将进退维谷。而且相较于商业软件公司，开源社区很少存在倒闭的问题。并且，源代码一旦公布于世，任何人或组织都可以接手进行新的维护工作。</p>
<p><strong>高品质</strong>：相较于闭源软件产品，开源项目通常是由开源社区来研发及维护的，参与编写、维护、测试的用户数量众多，一般的bug还没有等暴发就已经被修补。另外，在灵感不断碰撞、代码不断迭代的交流氛围中，程序员也不可能将“半成品”上传到开源社区中。</p>
<p><strong>低成本</strong>：开源工作者大多都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。</p>
<p><strong>更透明：</strong>没有哪个笨蛋会把木马或后门代码放到开源项目中，这样无疑是把自己的罪行暴露在阳光之下，很容易被他人发现。</p>
<ul>
<li>Linux常见的几个版本</li>
</ul>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/01/centos.jpg" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>CentOS社区企业操作系统（Community Enterprise Operating System）</strong></p>
<p>顾名思义，CentOS是由开源社区研发和维护的一款企业级Linux操作系统，在2014年1月被红帽公司正式收购。CentOS系统最为人广泛熟悉的标签就是“免费”。如果您问一个运维“老鸟”选择CentOS系统的理由，他绝对不会跟你说更安全或更稳定，而只是说两个字—免费！由于红帽企业版Linux是开源软件，任何人都有修改和创建衍生品的权利，因此CentOS便是将红帽企业版Linux中的收费功能通通去掉，然后将新系统重新编译后发布给用户免费使用的Linux系统。也正因为其免费的特性，CentOS拥有了广泛的用户。</p>
<p>从本质上来说，由于CentOS是针对红帽企业版Linux进行修改后再发布的版本，因此不会针对它单独开发新功能，CentOS的版本号也是随红帽企业版Linux而变更。例如，CentOS 8.0对应的就是RHEL 8.0，CentOS 8.1对应的就是RHEL 8.1；以此类推。再就是，CentOS系统和RHEL系统的软件包可以通用。也就是说，如果工作中用的是RHEL，但是在安装某款软件时只找到了该软件的CentOS系统软件源，也是可以正常安装该软件的。</p>
<hr>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/01/fedora-e1422160855872.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>Fedora Linux</strong></p>
<p>Fedora翻译为中文是“浅顶软呢男帽”的意思，翻译之后跟Linux系统很不搭界，所以更多人干脆将其音译为“费多拉”系统。Fedora Linux是正正经经的红帽公司自己的产品，最初是为了给红帽企业版Linux制作和测试第三方软件而构建的产品，孕育了最早的开源社群，固定每6个月发布一个新版本，当前在全球已经有几百万的用户。</p>
<p>Fedora是桌面版本的Linux系统，可以理解成是微软公司的Windows XP或者Windows 10。它的目标用户是应付日常的工作需要，而不会追求稳定性的人群。用户可以在这个系统中体验到最新的技术和工具，当这些技术和工具成熟后才会被移植到红帽企业版Linux中，因此Fedora也被称为RHEL系统的“试验田”。运维人员如果想每天都强迫自己多学点Linux知识，保持自己技术的领先性，就应该多关注此类Linux系统的发展变化和新特征，不断调整自己的学习方向。</p>
<hr>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/01/debian.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>Debian Linux</strong></p>
<p>一款基于GNU开源许可证的Linux系统，历史久远，最初发布于1993年9月。Debian的名字取自创始人<strong>Ian</strong> Murdock和他女朋友<strong>Deb</strong>ra的姓氏组合。在维基百科中，Debian被翻译为“蝶变”系统，多么浪漫而富有诗意的名字。但可惜国内的用户不买账，看着Logo一圈一圈的形状，硬生生地将经念歪了。这么多年下来，现在反而很少有人听说过蝶变系统这个名字了。</p>
<p>Debian系统具有很强的稳定性和安全性，并且提供了免费的基础支持，可以良好地适应各种硬件架构，以及提供近十万种不同的开源软件，在国外拥有很高的认可度和使用率。虽然Debian也是基于Linux内核，但是在实际操作中还是跟红帽公司的产品有一些差别，例如RHEL 7和RHEL 8分别使用Yum和DNF工具来安装软件，而Debian使用的则是APT工具。</p>
<hr>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/04/ubuntu-e1624206289343.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>Ubuntu Linux</strong></p>
<p>ubuntu是一款桌面版Linux系统，以Debian为蓝本进行修改和衍生而来，发布周期为6个月。Ubuntu的中文音译为“乌班图”，这个词最初来自于非洲南部部落使用的祖鲁语，意思是“我的存在是因为大家的存在”，体现了一种谦卑、感恩的价值观，寓意非常好。</p>
<p>Ubuntu系统的第一个版本发布于2004年10月。2005年7月，Ubuntu基金会成立，Ubuntu后续不断增加开发分支，有了桌面版系统、服务器版系统和手机版系统。据调查，Ubuntu最高峰时的用户达到了10亿人。尽管Ubuntu基于Debian系统衍生而来，但会对系统进行深度化定制，因此两者之间的软件并不一定完全兼容。Ubuntu系统现在由Canonical公司提供商业技术支持，只要购买付费技术支持服务就能获得帮助，桌面版系统最长时间3年，服务器版系统最长时间5年。</p>
<hr>
<img src="https://www.linuxprobe.com/wp-content/uploads/2016/03/OpenSUSE.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统" style="zoom:50%;" />

<p><strong>openSUSE Linux</strong></p>
<p>一款源自德国的Linux系统，在全球范围内有着不错的声誉及市场占有率。openSUSE的桌面版系统简洁轻快易于使用，而服务器版本则功能丰富极具稳定性，而且即便是“菜鸟”也能轻松上手。虽然openSUSE在技术上颇具优势，而且大大的绿色蜥蜴Logo人见人爱，只可惜命途多舛，赞助和研发该系统的SuSE Linux AG公司由于效益不佳，于2003年被Novell公司收购，而Novell公司又因经营不佳而在2011年被Attachmate公司收购。而到了2014年，Attachmate公司又被Micro Focus公司收购，后者仍然只把维护openSUSE系统的团队当作公司内的一个部门来运营。</p>
<p>即便如此，依然不妨碍openSUSE系统的坚强发展，用户可以完全自主选择要使用的软件。例如，针对GUI环境，就提供了诸如GNOME、KDE、Cinnamon、MATE、LXQt、Xfce等可选项；除此之外，还为用户提供了数千个免费开源的软件包。</p>
<hr>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/04/kali.jpg" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>Kali Linux</strong></p>
<p>跟上面的呆萌大蜥蜴相比，Kali Linux的Logo似乎有点凶巴巴，一副不好惹的样子。这款系统一般是供黑客或安全人员使用的，能够以此为平台对网站进行渗透测试，通俗来讲就是能“攻击”网站。Kali Linux系统的前身名为BackTrack，其设计用途就是进行数字鉴识和渗透测试，内置有600多款网站及系统的渗透测试软件，包括大名鼎鼎的Nmap、Wireshark、sqlmap等。Kali Linux能够被安装到个人电脑、公司服务器，甚至手掌大小的树莓派（一款微型电脑）上，可以让人有一种随身携带了一个武器库的感觉，有机会真应该单独写本书聊聊它。</p>
<hr>
<img src="https://www.linuxprobe.com/wp-content/uploads/2016/03/Gentoo.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统" style="zoom: 33%;" />

<p><strong>Gentoo Linux</strong></p>
<p>Gentoo翻译为中文是“巴布亚企鹅”。终于找到一个跟Linux吉祥物—企鹅相关的名字了。巴布亚企鹅是企鹅家族中体型最大的物种之一，游泳时速最快可达36千米—多么灵活的胖子！</p>
<p>Gentoo系统最大的特色就是允许用户完全自由地进行定制。开发人员Daniel曾经说过：“Gentoo系统的设计出发点就是让用户随意使用，没有限制地使用”。只要理解了这句话，后面也就不需要再解释什么了。在Gentoo系统中，任何一部分功能（包括最基本的系统库和编译器）都允许用户重新编译；用户也可以选择喜欢的补丁或者插件进行定制。但是，也因为Gentoo极高的自定制性，导致操作复杂，因此仅适合有经验的运维人员使用。有兴趣的读者可以在学习完本书后尝试一下该系统。</p>
<p>如果大家今后真的安装了Gentoo系统，千万别忘记试一下Portage工具。这款软件管理工具以模块化、可移植、易维护和灵活性而著称，几乎可以无限制地适应用户的计算机硬件。</p>
<hr>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/04/deepin.png" alt="第0章 咱们先来谈谈为什么要学习Linux系统第0章 咱们先来谈谈为什么要学习Linux系统"></p>
<p><strong>深度操作系统（deepin）</strong></p>
<p>在过去的十多年，基于开源系统二次定制开发的“国产操作系统”陆续出现过一些，但大多发展不好，深度操作系统却是少数能够将技术研发与商业运作结合起来的成功案例。据Deepin的官网介绍，该系统是由武汉深之度科技有限公司于2011年基于Debian系统衍生而来的，提供32种语言版本，目前累计下载量已近1亿次，用户遍布100余个国家&#x2F;地区。</p>
<p>就Deepin来讲，最吸引人的还是它的本土化工作。Deepin默认集成了诸如WPS Office、搜狗输入法、有道词典等国内常用的软件，对“小白”用户相当友好。当然，Deepin的技术研发能力相较于国际水平肯定还有差距，这点我们也要承认并正视。虽然刘遄老师偶尔也会在微博上调侃一下，但谁又不希望自己国家的技术发展越来越强大呢？</p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux就该这么学</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2022/03/05/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令:"></a>简写指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;`       等价于        `hexo new &quot;我的第一篇文章&quot;`  还等价于       `hexo new post &quot;我的第一篇文章&quot;`    </span><br><span class="line"> `hexo p` 等价于 `hexo publish`</span><br><span class="line"> `hexo g` 等价于 `hexo generate`  </span><br><span class="line"> `hexo s`等价于 `hexo server`     </span><br><span class="line"> `hexo d` 等价于 `hexo deploy`</span><br><span class="line"> `hexo deploy -g`  等价于 `hexo deploy --generate`</span><br><span class="line"> `hexo generate -d`等价于`hexo generate --deploy</span><br></pre></td></tr></table></figure>

<p><strong>注: hexo  clean 没有 简写,  git –version 没有简写</strong></p>
<span id="more"></span>

<h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明:"></a>指令说明:</h2><p><code>hexo server</code>        #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br> <code>hexo server -s</code> #以静态模式启动<br> <code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，’ctrl + c’关闭server)<br> <code>hexo server -i IP地址</code> #自定义 IP<br> <code>hexo clean</code> #清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹<br> <code>hexo g</code> #生成静态网页  (执行 <code>$ hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”&#x2F;blog&#x2F;source&#x2F;“   下面的.md后缀的文件编译为.html后缀的文件,存放在”&#x2F;blog&#x2F;public&#x2F; “   路径下)<br> <code>hexo d</code> #将本地数据部署到远端服务器(如github)<br> <code>hexo init 文件夹名称</code> #初始化XX文件夹名称<br> <code>npm update hexo -g</code>#升级<br> <code>npm install hexo -g</code>#安装<br> <code>node-v</code>          #查看node.js版本号<br> <code>npm -v</code>        #查看npm版本号<br> <code>git --version</code>  #查看git版本号<br> <code>hexo -v</code>      #查看hexo版本号</p>
<p><code>hexo publish [layout] &lt;title&gt;</code>   #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout] &lt;title&gt;</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p>
<p><code>hexo new aaa &quot;bbb&quot;</code>  # 新建一篇文章,文章名称和标题分别为bbb.md 和 bbb.   文章采用aaa布局,  此时会在站点根目录下的—-&gt;source—–&gt;_post文件夹下生成bbb.md文件,  bbb.md文件的顶部(—–分割线上方区域,也称作Front matter区),生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout : aaa`</span><br><span class="line"> `title:`</span><br><span class="line"> `date:</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2022/03/05/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="50个最常用的Unix-x2F-Linux命令"><a href="#50个最常用的Unix-x2F-Linux命令" class="headerlink" title="50个最常用的Unix&#x2F;Linux命令"></a>50个最常用的Unix&#x2F;Linux命令</h2><blockquote>
<p>这篇文章翻译自<a href="http://www.thegeekstuff.com/2010/11/50-linux-commands/%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E4%B8%80%E4%BA%9B%E5%BE%88%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%91%BD%E4%BB%A4%E9%83%BD%E6%9C%89%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E%E5%AE%83%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%8C%E5%AF%B9%E4%BA%8E%E6%83%B3%E5%AD%A6%E4%B9%A0Unix/Linux%E7%9A%84%E4%BA%BA%EF%BC%8C%E8%BF%99%E4%BA%9B%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%B8%8A%E9%83%BD%E6%98%AF%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%EF%BC%9A">http://www.thegeekstuff.com/2010/11/50-linux-commands/这些都是一些很常用的命令，这篇文章中每个命令都有一些简单的示例说明它的用法，对于想学习Unix/Linux的人，这些命令基本上都是需要掌握的：</a></p>
</blockquote>
<table>
<thead>
<tr>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#tar">tar</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#grep">grep</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#find">find</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ssh">ssh</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#sed">sed</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#awk">awk</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#vim">vim</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#diff">diff</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#sort">sort</a></th>
<th><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#export">export</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#args">args</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ls">ls</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#pwd">pwd</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cd">cd</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#gzip">gzip</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#bzip2">bzip2</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#unzip">unzip</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#shutdown">shutdown</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ftp">ftp</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#crontab">crontab</a></td>
</tr>
<tr>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#service">service</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ps">ps</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#free">free</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#top">top</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#df">df</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#kill">kill</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#rm">rm</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cp">cp</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mv">mv</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cat">cat</a></td>
</tr>
<tr>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mount">mount</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#chmod">chmod</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#chown">chown</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#passwd">passwd</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mkdir">mkdir</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ifconfig">ifconfig</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#uname">uname</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#whereis">whereis</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#whatis">whatis</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#locate">locate</a></td>
</tr>
<tr>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#man">man</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#tail">tail</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#less">less</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#su">su</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mysql">mysql</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#yum">yum</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#rpm">rpm</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ping">ping</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#date">date</a></td>
<td><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html#wget">wget</a></td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h3><p>创建一个新的tar文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar cvf archive_name.tar dirname/</span><br></pre></td></tr></table></figure>

<p>解压tar文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar xvf archive_name.tar</span><br></pre></td></tr></table></figure>

<p>查看tar文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar tvf archive_name.tar</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/04/unix-tar-command-examples/">The Ultimate Tar Command Tutorial with 10 Practical Examples</a></p>
<h3 id="2-grep"><a href="#2-grep" class="headerlink" title="2. grep"></a>2. grep</h3><p>在文件中查找字符串(不区分大小写)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ grep -i &quot;the&quot; demo_file</span><br></pre></td></tr></table></figure>

<p>输出成功匹配的行，以及该行之后的三行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ grep -A 3 -i &quot;example&quot; demo_text</span><br></pre></td></tr></table></figure>

<p>在一个文件夹中递归查询包含指定字符串的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ grep -r &quot;ramesh&quot; *</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/">Get a Grip on the Grep! – 15 Practical Grep Command Examples</a></p>
<h3 id="3-find"><a href="#3-find" class="headerlink" title="3. find"></a>3. find</h3><p>查找指定文件名的文件(不区分大小写)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find -iname &quot;MyProgram.c&quot;</span><br></pre></td></tr></table></figure>

<p>对找到的文件执行某个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find -iname &quot;MyProgram.c&quot; -exec md5sum &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>查找home目录下的所有空文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find ~ -empty</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/15-practical-linux-find-command-examples/">Mommy, I found it! — 15 Practical Linux Find Command Examples</a></p>
<h3 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4. ssh"></a>4. ssh</h3><p>登录到远程主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -l jsmith remotehost.example.com</span><br></pre></td></tr></table></figure>

<p>调试ssh客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -v -l jsmith remotehost.example.com</span><br></pre></td></tr></table></figure>

<p>显示ssh客户端版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -V</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2008/05/5-basic-linux-ssh-client-commands/">5 Basic Linux SSH Client Commands</a></p>
<h3 id="5-sed"><a href="#5-sed" class="headerlink" title="5. sed"></a>5. sed</h3><p>当你将Dos系统中的文件复制到Unix&#x2F;Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sed &#x27;s/.$//&#x27; filename</span><br></pre></td></tr></table></figure>

<p>反转文件内容并输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sed -n &#x27;1!G; h; p&#x27; filename</span><br></pre></td></tr></table></figure>

<p>为非空行添加行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sed &#x27;/./=&#x27; thegeekstuff.txt | sed &#x27;N; s/\n/ /&#x27;</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/10/unix-sed-tutorial-advanced-sed-substitution-examples/">Advanced Sed Substitution Examples</a></p>
<h3 id="6-awk"><a href="#6-awk" class="headerlink" title="6. awk"></a>6. awk</h3><p>删除重复行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ awk &#x27;!($0 in array) &#123; array[$0]; print&#125;&#x27; temp</span><br></pre></td></tr></table></figure>

<p>打印&#x2F;etc&#x2F;passwd中所有包含同样的uid和gid的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ awk -F &#x27;:&#x27; &#x27;$3=$4&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>

<p>打印文件中的指定部分的字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ awk &#x27;&#123;print $2,$5;&#125;&#x27; employee.txt</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/">8 Powerful Awk Built-in Variables – FS, OFS, RS, ORS, NR, NF, FILENAME, FNR</a></p>
<h3 id="7-vim"><a href="#7-vim" class="headerlink" title="7. vim"></a>7. vim</h3><p>打开文件并跳到第10行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim +10 filename.txt</span><br></pre></td></tr></table></figure>

<p>打开文件跳到第一个匹配的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim +/search-term filename.txt</span><br></pre></td></tr></table></figure>

<p>以只读模式打开文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim -R /etc/passwd</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/">How To Record and Play in Vim Editor</a></p>
<h3 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h3><p>比较的时候忽略空白符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ diff -w name_list.txt name_list_new.txt</span><br></pre></td></tr></table></figure>

<h3 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h3><p>以升序对文件内容排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sort names.txt</span><br></pre></td></tr></table></figure>

<p>以降序对文件内容排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sort -r names.txt</span><br></pre></td></tr></table></figure>

<p>以第三个字段对&#x2F;etc&#x2F;passwd的内容排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sort -t: -k 3n /etc/passwd | more</span><br></pre></td></tr></table></figure>

<h3 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h3><p>输出跟字符串oracle匹配的环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export | grep ORCALE</span><br><span class="line">declare -x ORACLE_BASE=&quot;/u01/app/oracle&quot;</span><br><span class="line">declare -x ORACLE_HOME=&quot;/u01/app/oracle/product/10.2.0&quot;</span><br><span class="line">declare -x ORACLE_SID=&quot;med&quot;</span><br><span class="line">declare -x ORACLE_TERM=&quot;xterm&quot;</span><br></pre></td></tr></table></figure>

<p>设置全局环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export ORACLE_HOME=/u01/app/oracle/product/10.2.0</span><br></pre></td></tr></table></figure>

<h3 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h3><p>将所有图片文件拷贝到外部驱动器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls *.jpg | xargs -n1 -i cp &#123;&#125; /external-hard-drive/directory</span><br></pre></td></tr></table></figure>

<p>将系统中所有jpd文件压缩打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</span><br></pre></td></tr></table></figure>

<p>下载文件中列出的所有url对应的页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat url-list.txt | xargs wget –c</span><br></pre></td></tr></table></figure>

<h3 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h3><p>以易读的方式显示文件大小(显示为MB,GB…)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -lh</span><br><span class="line">-rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</span><br></pre></td></tr></table></figure>

<p>以最后修改时间升序列出文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -ltr</span><br></pre></td></tr></table></figure>

<p>在文件名后面显示文件类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -F</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/07/linux-ls-command-examples/">Unix LS Command: 15 Practical Examples</a></p>
<h3 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h3><p>输出当前工作目录</p>
<h3 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h3><p><code>cd -</code>可以在最近工作的两个目录间切换</p>
<p>使用<code>shopt -s cdspell</code>可以设置自动对cd命令进行拼写检查</p>
<p>更多示例：<a href="http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/">6 Awesome Linux cd command Hacks</a></p>
<h3 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h3><p>创建一个*.gz的压缩文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gzip test.txt</span><br></pre></td></tr></table></figure>

<p>解压*.gz文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gzip -d test.txt.gz</span><br></pre></td></tr></table></figure>

<p>显示压缩的比率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gzip -l *.gz</span><br><span class="line">     compressed        uncompressed  ratio uncompressed_name</span><br><span class="line">          23709               97975  75.8% asp-patch-rpms.txt</span><br></pre></td></tr></table></figure>

<h3 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h3><p>创建*.bz2压缩文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bzip2 test.txt</span><br></pre></td></tr></table></figure>

<p>解压*.bz2文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bzip2 -d test.txt.bz2</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/10/bzcommand-examples/">BZ is Eazy! bzip2, bzgrep, bzcmp, bzdiff, bzcat, bzless, bzmore examples</a></p>
<h3 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h3><p>解压*.zip文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip test.zip</span><br></pre></td></tr></table></figure>

<p>查看*.zip文件的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip -l jasper.zip</span><br><span class="line">Archive:  jasper.zip</span><br><span class="line">Length     Date   Time    Name</span><br><span class="line">--------    ----   ----    ----</span><br><span class="line">40995  11-30-98 23:50   META-INF/MANIFEST.MF</span><br><span class="line">32169  08-25-98 21:07   classes_</span><br><span class="line">15964  08-25-98 21:07   classes_names</span><br><span class="line">10542  08-25-98 21:07   classes_ncomp</span><br></pre></td></tr></table></figure>

<h3 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h3><p>关闭系统并立即关机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shutdown -h now</span><br></pre></td></tr></table></figure>

<p>10分钟后关机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shutdown -h +10</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shutdown -r now</span><br></pre></td></tr></table></figure>

<p>重启期间强制进行系统检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ shutdown -Fr now</span><br></pre></td></tr></table></figure>

<h3 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h3><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ftp IP/hostname</span><br><span class="line">ftp&gt; mget *.html</span><br></pre></td></tr></table></figure>

<p>显示远程主机上文件列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp&gt; mls *.html -</span><br><span class="line">/ftptest/features.html</span><br><span class="line">/ftptest/index.html</span><br><span class="line">/ftptest/othertools.html</span><br><span class="line">/ftptest/samplereport.html</span><br><span class="line">/ftptest/usage.html</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/ftp-sftp-tutorial/">FTP and SFTP Beginners Guide with 10 Examples</a></p>
<h3 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h3><p>查看某个用户的crontab入口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -u john -l</span><br></pre></td></tr></table></figure>

<p>设置一个每十分钟执行一次的计划任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/10 * * * * /home/ramesh/check-disk-space</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/">Linux Crontab: 15 Awesome Cron Job Examples</a></p>
<h3 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h3><p>service命令用于运行System V init脚本，这些脚本一般位于&#x2F;etc&#x2F;init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p>
<p>查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service ssh status</span><br></pre></td></tr></table></figure>

<p>查看所有服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service --status-all</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service ssh restart</span><br></pre></td></tr></table></figure>

<h3 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h3><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p>
<p>查看当前正在运行的所有进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -ef | more</span><br></pre></td></tr></table></figure>

<p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -efH | more</span><br></pre></td></tr></table></figure>

<h3 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h3><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p>
<p>默认情况下free会以字节为单位输出内存的使用量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ free</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       3566408    1580220    1986188          0     203988     902960</span><br><span class="line">-/+ buffers/cache:     473272    3093136</span><br><span class="line">Swap:      4000176          0    4000176</span><br></pre></td></tr></table></figure>

<p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ free -g</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:             3          1          1          0          0          0</span><br><span class="line">-/+ buffers/cache:          0          2</span><br><span class="line">Swap:            3          0          3</span><br></pre></td></tr></table></figure>

<p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ramesh@ramesh-laptop:~$ free -t</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       3566408    1592148    1974260          0     204260     912556</span><br><span class="line">-/+ buffers/cache:     475332    3091076</span><br><span class="line">Swap:      4000176          0    4000176</span><br><span class="line">Total:     7566584    1592148    5974436</span><br></pre></td></tr></table></figure>

<h3 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h3><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Current Sort Field:  P  for window 1:Def</span><br><span class="line">Select sort field via field letter, type any other key to return</span><br><span class="line"></span><br><span class="line">  a: PID        = Process Id              v: nDRT       = Dirty Pages count</span><br><span class="line">  d: UID        = User Id                 y: WCHAN      = Sleeping in Function</span><br><span class="line">  e: USER       = User Name               z: Flags      = Task Flags</span><br><span class="line">  ........</span><br></pre></td></tr></table></figure>

<p>如果只想显示某个特定用户的进程，可以使用-u选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ top -u oracle</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/">Can You Top This? 15 Practical Linux Top Command Examples</a></p>
<h3 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h3><p>显示文件系统的磁盘使用情况，默认情况下<code>df -k </code>将以字节为单位输出磁盘的使用量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -k</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/sda1             29530400   3233104  24797232  12% /</span><br><span class="line">/dev/sda2            120367992  50171596  64082060  44% /home</span><br></pre></td></tr></table></figure>

<p>使用-h选项可以以更符合阅读习惯的方式显示磁盘使用量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on</span><br><span class="line">/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /</span><br><span class="line">devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /dev</span><br><span class="line">map -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /net</span><br><span class="line">map auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home</span><br><span class="line">/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP</span><br><span class="line">//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</span><br></pre></td></tr></table></figure>

<p>使用-T选项显示文件系统类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ df -T</span><br><span class="line">Filesystem    Type   1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/sda1     ext4    29530400   3233120  24797216  12% /</span><br><span class="line">/dev/sda2     ext4   120367992  50171596  64082060  44% /home</span><br></pre></td></tr></table></figure>

<h3 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h3><p>kill用于终止一个进程。一般我们会先用<code>ps -ef</code>查找某个进程得到它的进程号，然后再使用<code>kill -9 进程号</code>终止该进程。你还可以使用killall、pkill、xkill来终止进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep vim</span><br><span class="line">ramesh    7243  7222  9 22:43 pts/2    00:00:00 vim</span><br><span class="line"></span><br><span class="line">$ kill -9 7243</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/12/4-ways-to-kill-a-process-kill-killall-pkill-xkill/">4 Ways to Kill a Process – kill, killall, pkill, xkill</a></p>
<h3 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h3><p>删除文件前先确认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -i filename.txt</span><br></pre></td></tr></table></figure>

<p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -i file*</span><br></pre></td></tr></table></figure>

<p>递归删除文件夹下所有文件，并删除该文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -r example</span><br></pre></td></tr></table></figure>

<h3 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h3><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cp -p file1 file2</span><br></pre></td></tr></table></figure>

<p>拷贝file1到file2，如果file2存在会提示是否覆盖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cp -i file1 file2</span><br></pre></td></tr></table></figure>

<h3 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h3><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv -i file1 file2</span><br></pre></td></tr></table></figure>

<p>注意如果使用-f选项则不会进行提示</p>
<p>-v会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv -v file1 file2</span><br></pre></td></tr></table></figure>

<h3 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h3><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat file1 file2</span><br></pre></td></tr></table></figure>

<p>-n命令可以在每行的前面加上行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat -n /etc/logrotate.conf</span><br><span class="line">    1	/var/log/btmp &#123;</span><br><span class="line">    2	    missingok</span><br><span class="line">    3	    monthly</span><br><span class="line">    4	    create 0660 root utmp</span><br><span class="line">    5	    rotate 1</span><br><span class="line">    6	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h3><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mkdir /u01</span><br><span class="line"></span><br><span class="line"># mount /dev/sdb1 /u01</span><br></pre></td></tr></table></figure>

<p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/sdb1 /u01 ext2 defaults 0 2</span><br></pre></td></tr></table></figure>

<h3 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h3><p>chmod用于改变文件和目录的权限</p>
<p>给指定文件的属主和属组所有权限(包括读、写、执行)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod ug+rwx file.txt</span><br></pre></td></tr></table></figure>

<p>删除指定文件的属组的所有权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod g-rwx file.txt</span><br></pre></td></tr></table></figure>

<p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod -R ug+rwx file.txt</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/06/chmod-command-examples/">7 Chmod Command Examples for Beginners</a></p>
<h3 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h3><p>chown用于改变文件属主和属组</p>
<p>同时将某个文件的属主改为oracle，属组改为db</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chown oracle:dba dbora.sh</span><br></pre></td></tr></table></figure>

<p>使用-R选项对目录和目录下的文件进行递归修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chown -R oracle:dba /home/oracle</span><br></pre></td></tr></table></figure>

<h3 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h3><p>passwd用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ passwd</span><br></pre></td></tr></table></figure>

<p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd USERNAME</span><br></pre></td></tr></table></figure>

<p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd -d USERNAME</span><br></pre></td></tr></table></figure>

<h3 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h3><p>在home目录下创建一个名为temp的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/temp</span><br></pre></td></tr></table></figure>

<p>使用-p选项可以创建一个路径上所有不存在的目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir -p dir1/dir2/dir3/dir4/</span><br></pre></td></tr></table></figure>

<h3 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h3><p>ifconfig用于查看和配置Linux系统的网络接口</p>
<p>查看所有网络接口及其状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></table></figure>

<p>使用up和down命令启动或停止某个接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig eth0 up</span><br><span class="line"></span><br><span class="line">$ ifconfig eth0 down</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/03/ifconfig-7-examples-to-configure-network-interface/">Ifconfig: 7 Examples To Configure Network Interface</a></p>
<h3 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h3><p>uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux john-laptop 2.6.32-24-generic #41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</span><br></pre></td></tr></table></figure>

<h3 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h3><p>当你不知道某个命令的位置时可以使用whereis命令，下面使用whereis查找ls的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ whereis ls</span><br><span class="line">ls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</span><br></pre></td></tr></table></figure>

<p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在&#x2F;tmp目录下查找lsmk命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ whereis -u -B /tmp -f lsmk</span><br><span class="line">lsmk: /tmp/lsmk</span><br></pre></td></tr></table></figure>

<h3 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h3><p>wathis显示某个命令的描述信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ whatis ls</span><br><span class="line">ls		(1)  - list directory contents</span><br><span class="line"></span><br><span class="line">$ whatis ifconfig</span><br><span class="line">ifconfig (8)         - configure a network interface</span><br></pre></td></tr></table></figure>

<h3 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h3><p>locate命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p>
<p>下面的命令会显示系统中所有包含crontab字符串的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ locate crontab</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/etc/crontab</span><br><span class="line">/usr/bin/crontab</span><br><span class="line">/usr/share/doc/cron/examples/crontab2english.pl.gz</span><br><span class="line">/usr/share/man/man1/crontab.1.gz</span><br><span class="line">/usr/share/man/man5/anacrontab.5.gz</span><br><span class="line">/usr/share/man/man5/crontab.5.gz</span><br><span class="line">/usr/share/vim/vim72/syntax/crontab.vim</span><br></pre></td></tr></table></figure>

<h3 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h3><p>显示某个命令的man页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ man crontab</span><br></pre></td></tr></table></figure>

<p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ man SECTION-NUMBER commandname</span><br></pre></td></tr></table></figure>

<p>man页面一般可以分为8种命令类型</p>
<ol>
<li>用户命令</li>
<li>系统调用</li>
<li>c库函数</li>
<li>设备与网络接口</li>
<li>文件格式</li>
<li>游戏与屏保</li>
<li>环境、表、宏</li>
<li>系统管理员命令和后台运行命令</li>
</ol>
<p>例如，我们执行<code>whatis crontab</code>，你可以看到crontab有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ whatis crontab</span><br><span class="line">crontab (1)          - maintain crontab files for individual users (V3)</span><br><span class="line">crontab (5)          - tables for driving cron</span><br><span class="line"></span><br><span class="line">$ man 5 crontab</span><br></pre></td></tr></table></figure>

<h3 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h3><p>tail命令默认显示文件最后的10行文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tail filename.txt</span><br></pre></td></tr></table></figure>

<p>你可以使用-n选项指定要显示的行数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tail -n N filename.txt</span><br></pre></td></tr></table></figure>

<p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tail -f log-file</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/multitail-to-view-tail-f-output-of-multiple-log-files-in-one-terminal/">3 Methods To View tail -f output of Multiple Log Files in One Terminal</a></p>
<h3 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h3><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ less huge-log-file.log</span><br></pre></td></tr></table></figure>

<p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTRL+F – forward one window</span><br><span class="line">CTRL+B – backward one window</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/02/unix-less-command-10-tips-for-effective-navigation/">Unix Less Command: 10 Tips for Effective Navigation</a></p>
<h3 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h3><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su - USERNAME</span><br></pre></td></tr></table></figure>

<p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[john@dev-server]$ su - raj -c &#x27;ls&#x27;</span><br><span class="line"></span><br><span class="line">[john@dev-server]$</span><br></pre></td></tr></table></figure>

<p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su -s &#x27;SHELLNAME&#x27; USERNAME</span><br></pre></td></tr></table></figure>

<h3 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h3><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p>
<p>连接一个远程数据库，需要输入密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p -h 192.168.1.2</span><br></pre></td></tr></table></figure>

<p>连接本地数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p>
<h3 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h3><p>使用yum安装apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install httpd</span><br></pre></td></tr></table></figure>

<p>更新apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum update httpd</span><br></pre></td></tr></table></figure>

<p>卸载&#x2F;删除apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum remove httpd</span><br></pre></td></tr></table></figure>

<h3 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h3><p>使用rpm安装apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</span><br></pre></td></tr></table></figure>

<p>更新apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</span><br></pre></td></tr></table></figure>

<p>卸载&#x2F;删除apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rpm -ev httpd</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2010/07/rpm-command-examples/">RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages</a></p>
<h3 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h3><p>ping一个远程主机，只发5个数据包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ping -c 5 gmail.com</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/11/ping-tutorial-13-effective-ping-command-examples/">Ping Tutorial: 15 Effective Ping Command Examples</a></p>
<h3 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h3><p>设置系统日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># date -s &quot;01/31/2010 23:59:53&quot;</span><br></pre></td></tr></table></figure>

<p>当你修改了系统时间，你需要同步硬件时间和系统时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hwclock –systohc</span><br><span class="line"></span><br><span class="line"># hwclock --systohc –utc</span><br></pre></td></tr></table></figure>

<h3 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h3><p>使用wget从网上下载软件、音乐、视频</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>下载文件并以指定的文件名保存文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</span><br></pre></td></tr></table></figure>

<p>更多示例：<a href="http://www.thegeekstuff.com/2009/09/the-ultimate-wget-download-guide-with-15-awesome-examples/">The Ultimate Wget Download Guide With 15 Awesome Examples</a></p>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vi/vim常用快捷键及命令</title>
    <url>/2022/03/05/vi-vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>[雷宇]<a href="http://leiyu-code.github.io/">http://leiyu-code.github.io</a></p>
<h1 id="Linux-vi-x2F-vim"><a href="#Linux-vi-x2F-vim" class="headerlink" title="Linux vi&#x2F;vim"></a>Linux vi&#x2F;vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>但是目前我们使用比较多的是 vim 编辑器。</p>
<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 — 入门到进阶</a></p>
<hr>
<h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>连 vim 的官方网站 (<a href="https://www.vim.org/">https://www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p>
<hr>
<span id="more"></span>

<h2 id="vi-x2F-vim-的使用"><a href="#vi-x2F-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h2><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p>
<h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li>
<li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li>
<li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="img"></p>
<hr>
<h2 id="vi-x2F-vim-使用实例"><a href="#vi-x2F-vim-使用实例" class="headerlink" title="vi&#x2F;vim 使用实例"></a>vi&#x2F;vim 使用实例</h2><h3 id="使用-vi-x2F-vim-进入一般模式"><a href="#使用-vi-x2F-vim-进入一般模式" class="headerlink" title="使用 vi&#x2F;vim 进入一般模式"></a>使用 vi&#x2F;vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim runoob.txt</span><br></pre></td></tr></table></figure>

<p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p>
<h3 id="按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h3><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p>
<p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p>
<p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p>
<h3 id="按下-ESC-按钮回到一般模式"><a href="#按下-ESC-按钮回到一般模式" class="headerlink" title="按下 ESC 按钮回到一般模式"></a>按下 ESC 按钮回到一般模式</h3><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p>
<h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/07/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p>
<p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p>
<hr>
<h2 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>
<h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td>
<td></td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">n<space></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td align="left">n<Enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
<tr>
<td align="left">搜索替换</td>
<td></td>
</tr>
<tr>
<td align="left">&#x2F;word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td>
<td></td>
</tr>
<tr>
<td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
<tr>
<td align="left">删除、复制与贴上</td>
<td></td>
</tr>
<tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td>
<td></td>
</tr>
<tr>
<td align="left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody></table>
<h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">i, I</td>
<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>
<td></td>
</tr>
<tr>
<td align="left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>
</tr>
<tr>
<td align="left">ZQ</td>
<td>不保存，强制退出。效果等同于 **:q!**。</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">vim 环境的变更</td>
<td></td>
</tr>
<tr>
<td align="left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p>
<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>
<p> <a href="https://www.runoob.com/linux/linux-filesystem.html">Linux 磁盘管理</a></p>
<p><a href="https://www.runoob.com/linux/linux-yum.html">linux yum 命令</a> </p>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><strong>vim 中批量添加注释</strong></p>
<p>方法一 ：块选择模式</p>
<p>批量注释：</p>
<p><strong>Ctrl + v</strong> 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 <strong>I</strong> 进入行首插入模式输入注释符号如 <strong>&#x2F;&#x2F;</strong> 或 <strong>#<strong>，输入完毕之后，按两下 <strong>ESC</strong>，</strong>Vim</strong> 会自动将你选中的所有行首都加上注释，保存退出完成注释。</p>
<p>取消注释：</p>
<p><strong>Ctrl + v</strong> 进入块选择模式，选中你要删除的行首的注释符号，注意 <strong>&#x2F;&#x2F;</strong> 要选中两个，选好之后按 <strong>d</strong> 即可删除注释，<strong>ESC</strong> 保存退出。</p>
<p>方法二: 替换命令</p>
<p>批量注释。</p>
<p>使用下面命令在指定的行首添加注释。</p>
<p>使用名命令格式： <strong>:起始行号,结束行号s&#x2F;^&#x2F;注释符&#x2F;g</strong>（注意冒号）。</p>
<p>取消注释：</p>
<p>使用名命令格式： <strong>:起始行号,结束行号s&#x2F;^注释符&#x2F;&#x2F;g</strong>（注意冒号）。</p>
<p>例子：</p>
<p>1、在 10 - 20 行添加 <strong>&#x2F;&#x2F;</strong> 注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:10,20s#^#//#g</span><br></pre></td></tr></table></figure>

<p>2、在 10 - 20 行删除 <strong>&#x2F;&#x2F;</strong> 注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:10,20s#^//##g</span><br></pre></td></tr></table></figure>

<p>3、在 10 - 20 行添加 <strong>#</strong> 注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:10,20s/^/#/g</span><br></pre></td></tr></table></figure>

<p>4、在 <strong>10 - 20</strong> 行删除 # 注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:10,20s/#//g</span><br></pre></td></tr></table></figure>





<p>vim快捷键补充（插入模式）</p>
<ol>
<li>自动补全：<strong>ctrl</strong> + <strong>n</strong></li>
<li>**\p&lt;** 插入一个include，并把光标置于&lt;&gt;中间</li>
<li><strong>\im</strong> 插入主函数</li>
<li><strong>\ip</strong> 插入printf，并自动添加<strong>\n</strong>，且把光标置于双引号中间</li>
</ol>
<p>vim快捷键补充（编辑模式）</p>
<ol>
<li>dw 删除一个单词（配合b：将光标置于所在单词的首部）</li>
<li>yw 复制一个单词（配合p：粘贴）</li>
</ol>
<p>vim快捷键补充（插入与编辑模式通用）</p>
<ol>
<li>\rr 运行程序</li>
<li>\rc 保存并编译程序（会生成二进制文件）</li>
</ol>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vi</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2022/03/04/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>git 常用命令</p>
<p>[雷宇]<a href="http://leiyu-code.github.io/">http://leiyu-code.github.io</a></p>
<p><a href="https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg"><img src="https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg" alt="img"></a></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人网站详细教程</title>
    <url>/2022/02/25/GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="GitHub-Hexo-搭建个人网站详细教程"><a href="#GitHub-Hexo-搭建个人网站详细教程" class="headerlink" title="GitHub+Hexo 搭建个人网站详细教程"></a>GitHub+Hexo 搭建个人网站详细教程</h1><p><img src="https://pica.zhimg.com/v2-d4c1239e75c02e8482c22017a6c8d407_1440w.jpg?source=172ae18b" alt="https://pica.zhimg.com/v2-d4c1239e75c02e8482c22017a6c8d407_1440w.jpg?source=172ae18b"></p>
<h4 id="雷宇-http-leiyu-code-github-io"><a href="#雷宇-http-leiyu-code-github-io" class="headerlink" title="[雷宇]http://leiyu-code.github.io"></a>[雷宇]<a href="http://leiyu-code.github.io/">http://leiyu-code.github.io</a></h4><p><strong>前言：</strong></p>
<p>随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交网站让用户分享信息更加便捷。然后，如果你是一个不甘寂寞的程序猿（媛），是否也想要搭建一个属于自己的个人网站，如果你曾经或者现在正有这样的想法，请跟随这篇文章发挥你的Geek精神，让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。   </p>
 <span id="more"></span>

<p><a href="https://www.zhihu.com/question/29755481">你见过的最棒的个人博客界面是什么样的？</a></p>
<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a><strong>什么是Hexo ?</strong></h2><p><img src="https://pic2.zhimg.com/80/v2-6890485c84748900d9dae824b7f7cbb1_720w.jpg" alt="https://pic2.zhimg.com/80/v2-6890485c84748900d9dae824b7f7cbb1_720w.jpg"></p>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。Hexo同时也是GitHub上的开源项目，参见：<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo">hexojs&#x2F;hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://link.zhihu.com/?target=https://hexo.io/">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。这里，默认各位猿&#x2F;媛儿都知道GitHub就不再赘述。</p>
<p><strong>这是我的个人博客效果:</strong> <a href="http://leiyu-code.github.io/">http://leiyu-code.github.io</a></p>
<p>下面正式从零开始搭建年轻人的第一个网站。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><ul>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
<li>初识MarkDown语法</li>
<li>发布文章</li>
<li>寻找图床</li>
<li>个性化设置</li>
<li>其他</li>
<li>附录</li>
</ul>
<p><strong>获得个人网站域名</strong></p>
<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://link.zhihu.com/?target=https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>
<p>申请域名的地方有很多，这里推荐阿里云：<a href="https://link.zhihu.com/?target=https://www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>
<p><strong>GitHub创建个人仓库</strong></p>
<p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://link.zhihu.com/?target=https://github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p>
<p><img src="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_720w.jpg" alt="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_720w.jpg"></p>
<p><strong>安装Git</strong></p>
<p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://link.zhihu.com/?target=http://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="https://link.zhihu.com/?target=http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a> 从Git官网下载：<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>
<p><img src="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_720w.jpg" alt="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_720w.jpg"></p>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<p><code>git config --global user.name &quot;你的GitHub用户名&quot; git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></p>
<p>生成ssh密钥文件：</p>
<p><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></p>
<p>然后直接三个回车即可，默认不需要设置密码然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p>The key fingerprint is:</p>
<p>The key’s randomart image is:</p>
<p>默认生成目录是：</p>
<p>Your identification has been saved in c:&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa<br>Your public key has been saved in c:&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa.pub</p>
<p><img src="https://pic4.zhimg.com/80/v2-d1e47103ec1aa8675f68688c5d63bd27_720w.jpg" alt="https://pic4.zhimg.com/80/v2-d1e47103ec1aa8675f68688c5d63bd27_720w.jpg"></p>
<p>打开<a href="https://link.zhihu.com/?target=https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://pic1.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_720w.jpg" alt="https://pic1.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_720w.jpg"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入 ssh  <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a> ：</p>
<p><img src="https://pic3.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_720w.jpg" alt="https://pic3.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_720w.jpg"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<p>第一次连接ssh必须要用 ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;</a></p>
<p><strong>安装Node.js</strong></p>
<p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>
<p><img src="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_720w.jpg" alt="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_720w.jpg"></p>
<p>检测npm是否安装成功，在命令行中输入npm -v :</p>
<p><img src="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_720w.jpg" alt="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_720w.jpg"></p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
<p><strong>安装Hexo</strong></p>
<p>Hexo就是我们的个人博客网站的框架。在git bash命令里进行Hexo的安装，</p>
<p><img src="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_720w.jpg" alt="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_720w.jpg"></p>
<p>使用npm命令安装Hexo，输入：</p>
<p><code>npm install -g hexo-cli</code></p>
<p>这个安装时间较长耐心等待，安装完成后，</p>
<p>当前目录下会建立名称为blog的文件夹，进入blog文件夹输入</p>
<p><code>hexo init</code></p>
<p>或不进入文件夹输入</p>
<p><code>hexo init blog</code></p>
<p>会自动建立一个名称为blog的文件夹</p>
<p>初始化我们的博客。</p>
<p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p>
<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<p><code>hexo new test_my_site hexo g hexo s</code></p>
<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p><a href="http://localhost:4000/">localhost:4000</a></p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://pic4.zhimg.com/80/v2-123e73c0630d299b1c856d99b04b55bb_720w.jpg" alt="https://pic4.zhimg.com/80/v2-123e73c0630d299b1c856d99b04b55bb_720w.jpg"></p>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g #安装Hexo</p>
<p>npm update hexo -g #升级</p>
<p>hexo init #初始化博客命令简写</p>
<p>hexo n “我的博客” &#x3D;&#x3D; </p>
<p>hexo new “我的博客” #新建文章</p>
<p>hexo g &#x3D;&#x3D; hexo generate #生成</p>
<p>hexo s &#x3D;&#x3D; hexo server #启动服务预览</p>
<p>hexo d &#x3D;&#x3D; hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</p>
<p>hexo server -s #静态模式</p>
<p>hexo server -p 5000 #更改端口</p>
<p>hexo server -i 192.168.1.1 #自定义 </p>
<p>IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<p><strong>推送网站</strong></p>
<p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://pic2.zhimg.com/80/v2-cb1fd5e5a2e73f513234e434724c7c55_720w.jpg" alt="https://pic2.zhimg.com/80/v2-cb1fd5e5a2e73f513234e434724c7c55_720w.jpg"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://pic4.zhimg.com/80/v2-4252029e5634bf91c7d58916ae2b8ac3_720w.jpg" alt="https://pic4.zhimg.com/80/v2-4252029e5634bf91c7d58916ae2b8ac3_720w.jpg"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:type: gitrepo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .gitbranch: master参考如下：</p>
<p>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com">git@github.com</a>:LeiYu-code&#x2F;LeiYu-code.github.io.git<br>branch: master</p>
<p>保存站点配置文件。</p>
<p>注意：</p>
<p>因为已经配置好了token密码，这里的仓库链接最好用ssh链接</p>
<p>密码输错两次后会导致连不上仓库，最好重启电脑</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>这时，我们分别输入三条命令:</p>
<p><code>hexo clean   hexo g   hexo d</code></p>
<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http:&#x2F;&#x2F;“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p>
<p><img src="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_720w.jpg" alt="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_720w.jpg"></p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<p><strong>绑定域名</strong></p>
<p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http:&#x2F;&#x2F;“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_720w.jpg" alt="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_720w.jpg"></p>
<p>然后添加解析</p>
<img src="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_720w.jpg" alt="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_720w.jpg" style="zoom:50%;" />

<p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_720w.jpg" alt="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_720w.jpg"></p>
<p>点击save保存。第三步，进入本地博客文件夹 ，进入blog&#x2F;source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p>
<p><img src="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_720w.jpg" alt="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_720w.jpg"></p>
<p>保存，命名为CNAME ，·保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p>
<p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<p><code>hexo clean hexo g hexo d</code></p>
<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
<p><strong>更改语言为中文：</strong></p>
<p>找到_config.yml文件，将language修改</p>
<p><code>language: zh-Hans</code></p>
<p>![Untitled](C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;Export-c06c179a-cfc9-4393-87d2-32a5dd488402&#x2F;GitHub+Hex ab864&#x2F;Untitled.png)</p>
<p><strong>更换主题</strong></p>
<p>在第一次更换主题文件时，要将配置文件的false改成ture，改成可以控制的</p>
<p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<p><code>git clone git://github.com/iissnan/hexo-theme-next themes/next</code></p>
<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p><img src="https://pic1.zhimg.com/80/v2-b1997377e82408cb15b485c65ae00f70_720w.jpg" alt="https://pic1.zhimg.com/80/v2-b1997377e82408cb15b485c65ae00f70_720w.jpg"></p>
<p>- </p>
<p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p>
<p><img src="https://pic2.zhimg.com/80/v2-1ac152c4aabe4c10b762ee27552f1105_720w.jpg" alt="https://pic2.zhimg.com/80/v2-1ac152c4aabe4c10b762ee27552f1105_720w.jpg"></p>
<p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
<p><strong>初识Markdown语法</strong></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p>
<p><strong>发布文章</strong></p>
<p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<p><code>hexo n &quot;博客名字&quot;</code></p>
<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p>
<p><img src="https://pic1.zhimg.com/80/v2-4f96cd03a88e68b8ae86c38bfb0808ac_720w.jpg" alt="https://pic1.zhimg.com/80/v2-4f96cd03a88e68b8ae86c38bfb0808ac_720w.jpg"></p>
<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<p><strong>寻找图床</strong></p>
<p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="C:/Users/Administrator/Desktop/Export-c06c179a-cfc9-4393-87d2-32a5dd488402/外部链接" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p>
<p><img src="https://pic4.zhimg.com/80/v2-92372e522595af139ace5f371aae3ff3_720w.jpg" alt="https://pic4.zhimg.com/80/v2-92372e522595af139ace5f371aae3ff3_720w.jpg"></p>
<p><strong>个性化设置</strong></p>
<p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p>
<p>基本的有：</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<p><img src="https://pic4.zhimg.com/80/v2-78bc0e4e6498c9c3cb269b3254d8379f_720w.jpg" alt="https://pic4.zhimg.com/80/v2-78bc0e4e6498c9c3cb269b3254d8379f_720w.jpg"></p>
<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，如：</p>
<p><img src="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_720w.jpg" alt="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_720w.jpg"></p>
<p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p>
<p><img src="https://pic2.zhimg.com/80/v2-69bbc45e973eb6916e08187ed8b33a55_720w.jpg" alt="https://pic2.zhimg.com/80/v2-69bbc45e973eb6916e08187ed8b33a55_720w.jpg"></p>
<p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p>
<p><img src="https://pic4.zhimg.com/80/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_720w.jpg" alt="https://pic4.zhimg.com/80/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_720w.jpg"></p>
<p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p>
<p>进阶个性化：</p>
<ul>
<li>添加网易云音乐</li>
</ul>
<p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p>
<p><img src="https://pic2.zhimg.com/80/v2-fcb7d44ccdca3760c98db0d13817f2b5_720w.jpg" alt="https://pic2.zhimg.com/80/v2-fcb7d44ccdca3760c98db0d13817f2b5_720w.jpg"></p>
<p>复制外链的代码</p>
<p><img src="https://pic4.zhimg.com/80/v2-16eec195312cde7b1d257fac6f3c8d0b_720w.jpg" alt="https://pic4.zhimg.com/80/v2-16eec195312cde7b1d257fac6f3c8d0b_720w.jpg"></p>
<p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p>
<p><img src="https://pic4.zhimg.com/80/v2-03db51002497b27e4d5888e0efd577c7_720w.jpg" alt="https://pic4.zhimg.com/80/v2-03db51002497b27e4d5888e0efd577c7_720w.jpg"></p>
<p>重新生成、部署网页，效果如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_720w.jpg" alt="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_720w.jpg"></p>
<ul>
<li>设置背景</li>
</ul>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p>
<p><code>body &#123;   **background**:url(/images/background.jpg);   **background-attachment**: **fixed**; &#125;</code></p>
<p>background-attachment: fixed;是固定背景图片。</p>
<p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<ul>
<li>增加侧栏菜单条目</li>
</ul>
<p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p>
<p><img src="https://pic3.zhimg.com/80/v2-666a22fedbba95d979eeb26e52fc29e2_720w.jpg" alt="https://pic3.zhimg.com/80/v2-666a22fedbba95d979eeb26e52fc29e2_720w.jpg"></p>
<p>其中menu里是配置菜单项对应的页面位置（如：&#x2F;love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="https://link.zhihu.com/?target=http://fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，注意冒号有一个英文输入状态的空格。设置好后，在命令行里输入：</p>
<p><code>hexo new page &quot;你所要增加的菜单项名称（要和你在menu中的填写要匹配）&quot;</code></p>
<p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p>
<p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">档</a><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p>
<p>有很多人私信问我High功能特效如何设置，这里推荐一篇同是Next主题网站博主的文章：<a href="https://link.zhihu.com/?target=http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">为Hexo Next主题添加哈林摇特效（五）</a></p>
<p><strong>其他</strong></p>
<p>终于写到这里了，也算是基本圆满完成了我的写作初衷，总结自己的一些经验，分享一些有趣的东西，不过脖子也是僵硬的受不了。我知道很多人想要建立自己的个人网站却一直没有付诸行动，希望这篇文章能给你一点点灵感与想法，just do it。本文是windows平台的搭建过程，其他平台可以参看相关资料，也有很多其他优秀的博客框架值得学习。如果有任何建议或想法、或疑问欢迎在评论区交流， 做好的网站不妨在评论区贴出网址，让大家一起学习。</p>
<p><strong>附录</strong></p>
<p><strong>以下是评论区贴出网址的博客展示：</strong></p>
<p><a href="https://link.zhihu.com/?target=http://jmyblog.top/">…Miss.j BlogDiary…</a></p>
<p><a href="https://link.zhihu.com/?target=http://ibb.chaodamiao.com/">RILWEIC</a></p>
<p><a href="https://link.zhihu.com/?target=http://blog.sunxinfei.com/">Xin’s Notes</a></p>
<p><a href="https://link.zhihu.com/?target=https://guguant.github.io/">飞鸟与鱼</a></p>
<p><a href="https://link.zhihu.com/?target=http://www.fuck-goods.tk/">无名博客</a></p>
<p><a href="https://link.zhihu.com/?target=http://helloqa.com/">iTesting软件测试知识分享</a></p>
<p><a href="https://link.zhihu.com/?target=http://bolg.upsky.top/">赵小源的个人博客</a></p>
<p><a href="https://link.zhihu.com/?target=http://www.huajiayi.top/">华嘉熠’s Blog</a></p>
<p><a href="https://link.zhihu.com/?target=http://asmire.site/">Cocoon</a></p>
<p><a href="https://link.zhihu.com/?target=https://luoshaoxiong.github.io/">罗少雄’s Blog</a></p>
<p><a href="https://link.zhihu.com/?target=https://lruihao.github.io/">李四啊_</a></p>
<p><strong>其他优秀个人博客展示：</strong></p>
<p><a href="https://link.zhihu.com/?target=https://www.dandyweng.com/">翁天信 · Dandy Weng</a> <a href="https://link.zhihu.com/?target=http://chaoxuprime.com/">chaoxuprim</a> <a href="https://link.zhihu.com/?target=http://kenjiendo.com/">KENJI ENDO</a> <a href="https://link.zhihu.com/?target=http://shenzekun.cn/">Moorez</a> <a href="https://link.zhihu.com/?target=https://codesky.me/">CodeSky 代码之空</a> <a href="https://link.zhihu.com/?target=http://www.helloshawn.cn/">大江东去</a> <a href="https://link.zhihu.com/?target=http://iconmoon.com/">UI Design Portfolio of JJ Ying</a> <a href="https://link.zhihu.com/?target=http://www.jeyzhang.com/">JeyZhang</a> <a href="https://link.zhihu.com/?target=http://blog.lightina.cn/">jacklightChen | 得到的都是侥幸</a> <a href="https://link.zhihu.com/?target=https://qingpei.me/">edwardtoday</a> <a href="https://link.zhihu.com/?target=http://rafaltomal.com/">Rafal Tomal - Web Designer and Genesis Developer</a> <a href="https://link.zhihu.com/?target=http://strml.net/">Projects and Work</a> <a href="https://link.zhihu.com/?target=http://miaoxiaoer.com/">绘画爱好者</a> <a href="https://link.zhihu.com/?target=http://ursocute.github.io/">万世奇的博客</a> <a href="https://link.zhihu.com/?target=https://rauchg.com/">Guillermo Rauch</a></p>
<ul>
<li>转载自吴润的博客</li>
</ul>
]]></content>
      <categories>
        <category>studynote</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
